components:
  schemas:
    Algorithm:
      properties:
        cluster:
          description: Unique integer identifying the job cluster.
          type: integer
        description:
          description: Description of the algorithm.
          type: string
        files_per_job:
          description: Number of media files to be submitted to each workflow.
          type: integer
        id:
          description: Unique integer identifying the registered algorithm.
          type: integer
        manifest:
          description: Server URL to argo manifest file (.yaml)
          type: string
        name:
          description: Unique name of the algorithm workflow.
          type: string
        project:
          description: Unique integer identifying the project associated with the
            algorithm.
          type: integer
        user:
          description: Unique integer identifying the user registering the algorithm.
          type: integer
      type: object
    AlgorithmLaunch:
      properties:
        gid:
          description: A uuid string identifying the group of jobs started.
          type: string
        message:
          description: Message indicating successful launch.
          type: string
        uid:
          description: A list of uuid strings identifying each job started.
          items:
            type: string
          type: array
      type: object
    AlgorithmLaunchSpec:
      properties:
        algorithm_name:
          description: Name of the algorithm to execute.
          type: string
        extra_params:
          description: Extra parameters to pass into the algorithm
          items:
            $ref: '#/components/schemas/AlgorithmParameter'
            x-scope:
            - ''
            - '#/components/schemas/AlgorithmLaunchSpec'
          type: array
        media_ids:
          description: List of media IDs. Must supply media_query or media_ids.
          items:
            type: integer
          type: array
        media_query:
          description: Query string used to filter media IDs. If supplied, media_ids
            will be ignored.
          type: string
      required:
      - algorithm_name
      type: object
    AlgorithmManifest:
      properties:
        url:
          description: Name of algorithm manifest (.yaml) file
          type: string
      type: object
    AlgorithmManifestSpec:
      description: Algorithm manifest save spec.
      properties:
        name:
          description: Name of manifest (.yaml) file
          type: string
        upload_url:
          description: URL of the uploaded file returned from tus upload
          type: string
      type: object
    AlgorithmParameter:
      properties:
        name:
          description: Name of algorithm parameter
          type: string
        value:
          description: Value of algorithm parameter
      required:
      - name
      - value
      type: object
    AlgorithmSpec:
      description: Algorithm registration creation spec.
      properties:
        cluster:
          description: Unique integer identifying the job cluster.
          type: integer
        description:
          description: Description of the algorithm.
          type: string
        files_per_job:
          description: Number of media files to be submitted to each workflow.
          type: integer
        manifest:
          description: Server URL to argo manifest file (.yaml)
          type: string
        name:
          description: Unique name of the algorithm workflow.
          type: string
        user:
          description: Unique integer identifying the user registering the algorithm.
          type: integer
      required:
      - name
      - user
      - manifest
      - files_per_job
      type: object
    AlphaRange:
      description: Three element array containing start attribute value, stop attribute
        value, and alpha level 0-255 for the localizations with attribute value falling
        in this range.
      items:
        type: number
      maxLength: 3
      minLength: 3
      type: array
    Analysis:
      properties:
        data_query:
          default: '*'
          description: Lucene query string used to retrieve entities to analyze.
          type: string
        id:
          description: Unique integer identifying the analysis.
          type: integer
        name:
          description: Name of analysis.
          type: string
      type: object
    AnalysisSpec:
      properties:
        data_query:
          default: '*'
          description: Lucene query string used to retrieve entities to analyze.
          type: string
        name:
          description: Name of analysis.
          type: string
      required:
      - name
      - data_query
      type: object
    ArchiveConfig:
      description: Settings for archival video encode and storage. If not set, the
        raw video will be stored in Tator.
      properties:
        encode:
          $ref: '#/components/schemas/EncodeConfig'
          x-scope:
          - ''
          - '#/components/schemas/MediaType'
          - '#/components/schemas/ArchiveConfig'
        name:
          description: Name of this archive config, used for retrieval in case of
            multiple archive configs.
          type: string
        s3_storage:
          $ref: '#/components/schemas/S3StorageConfig'
          x-scope:
          - ''
          - '#/components/schemas/MediaType'
          - '#/components/schemas/ArchiveConfig'
      type: object
    AttributeBulkUpdate:
      properties:
        attributes:
          additionalProperties:
            $ref: '#/components/schemas/AttributeValue'
            x-scope:
            - ''
            - '#/components/schemas/AttributeBulkUpdate'
          description: Attribute values to bulk update an entity list.
          type: object
      required:
      - attributes
      type: object
    AttributeType:
      properties:
        autocomplete:
          $ref: '#/components/schemas/AutocompleteService'
          x-scope:
          - ''
          - '#/components/schemas/LeafType'
          - '#/components/schemas/AttributeType'
        choices:
          description: Array of possible values for enum dtype.
          items:
            type: string
          type: array
        default:
          $ref: '#/components/schemas/AttributeValue'
          x-scope:
          - ''
          - '#/components/schemas/LeafType'
          - '#/components/schemas/AttributeType'
        description:
          default: ''
          description: Description of the attribute.
          type: string
        dtype:
          description: Data type of the attribute.
          enum:
          - bool
          - int
          - float
          - enum
          - string
          - datetime
          - geopos
          type: string
        labels:
          description: Array of labels for enum dtype.
          items:
            type: string
          type: array
        maximum:
          description: Upper bound for int or float dtype.
          type: number
        minimum:
          description: Lower bound for int or float dtype.
          type: number
        name:
          description: Name of the attribute.
          type: string
        order:
          default: 0
          description: Integer specifying relative order this attribute is displayed
            in the UI. Negative values are hidden by default.
          type: integer
        required:
          default: false
          description: True if this attribute is required for POST requests.
          type: boolean
        style:
          description: 'Available options: disabled|long_string|start_frame|end_frame|start_frame_check|end_frame_check   Multiple
            options can be chained together separated by white space. "disabled" will
            not allow the user to edit the attribute in the Tator GUI. Create a text
            area string if "long_string" is combined with "string" dtype. "start_frame"
            and "end_frame" used in conjunction with "attr_style_range" interpolation.
            "start_frame_check and "end_frame_check" are used in conjunction with
            "attr_style_range" interpolation. "range_set and in_video_check" is used
            in conjunction with "attr_style_range" interpolation. When associated
            with a bool, these checks will result in Tator GUI changes with the corresponding
            start_frame and end_frame attributes.'
          type: string
        use_current:
          description: True to use current datetime as default for datetime dtype.
          type: boolean
      type: object
    AttributeValue:
      description: Boolean, integer, float, string, datetime, or [lon, lat].
      nullable: true
    AudioDefinition:
      properties:
        bit_rate:
          description: Bit rate in bits per second
          nullable: false
          type: integer
        codec:
          description: Human readable codec.
          nullable: false
          type: string
        codec_description:
          description: Description other than codec.
          nullable: false
          type: string
        codec_mime:
          description: 'Example mime: "video/mp4; codecs="avc1.64001e"". Only relevant
            for streaming files, will assume example above if not present.'
          type: string
        host:
          description: If supplied will use this instead of currently connected host,
            e.g. https://example.com
          type: string
        http_auth:
          description: If specified will be used for HTTP authorization in request
            for media, i.e. "bearer <token>".
          type: string
        path:
          description: Relative URL to the file.
          type: string
        size:
          description: File size in bytes.
          nullable: false
          type: integer
        url:
          description: Required when this object is used with the MoveVideo endpoint,
            this field is the upload URL of the audio file. It is is used for the
            src path and to create `path` field.
          type: string
      required:
      - codec
      type: object
    AutocompleteService:
      nullable: true
      properties:
        serviceUrl:
          description: URL of the autocomplete service.
          type: string
      type: object
    BadRequestResponse:
      properties:
        details:
          description: Detailed error message for bad request.
          type: string
        message:
          description: Error message for bad request.
          type: string
      type: object
    Bookmark:
      description: Bookmark object.
      properties:
        id:
          description: Unique integer identifying a bookmark.
          type: integer
        name:
          description: Name of the bookmark.
          nullable: false
          type: string
        project:
          description: Unique integer identifying a project.
          type: integer
        uri:
          description: URI to the saved link.
          nullable: false
          type: string
        user:
          description: Unique integer identifying a user.
          minimum: 1
          type: integer
      type: object
    BookmarkSpec:
      properties:
        name:
          description: Name of the bookmark.
          nullable: false
          type: string
        uri:
          description: URI to the saved link.
          nullable: false
          type: string
      type: object
    BookmarkUpdate:
      nullable: false
      properties:
        name:
          description: Name of the bookmark.
          nullable: false
          type: string
        uri:
          description: URI to the saved link.
          nullable: false
          type: string
      type: object
    CloneMediaSpec:
      properties:
        dest_project:
          description: Unique integer identyifying destination project.
          type: integer
        dest_section:
          description: Destination media section name.
          type: string
        dest_type:
          description: Unique integer identifying destination media type. Use -1 to
            automatically select the media type if only one media type exists in the
            destination project.
          minimum: -1
          type: integer
      required:
      - dest_project
      - dest_type
      type: object
    Color:
      description: RGB array, RGBA array, or hex string.
    ColorMap:
      description: Maps an attribute value or version to a color/alpha. Use `key`
        and `map` (optionally `alpha_ranges`) to map an attribute value to colors.
        Use `version` to map version IDs to colors.
      properties:
        alpha_ranges:
          additionalProperties:
            $ref: '#/components/schemas/AlphaRange'
            x-scope:
            - ''
            - '#/components/schemas/LocalizationType'
            - '#/components/schemas/ColorMap'
          description: Map of attribute values to alpha level.
          type: object
        default:
          $ref: '#/components/schemas/Color'
          x-scope:
          - ''
          - '#/components/schemas/LocalizationType'
          - '#/components/schemas/ColorMap'
        defaultFill:
          $ref: '#/components/schemas/Fill'
          x-scope:
          - ''
          - '#/components/schemas/LocalizationType'
          - '#/components/schemas/ColorMap'
        fillMap:
          additionalProperties:
            $ref: '#/components/schemas/Fill'
            x-scope:
            - ''
            - '#/components/schemas/LocalizationType'
            - '#/components/schemas/ColorMap'
          description: Map of attribute values to fill types.
          type: object
        key:
          description: Attribute name.
          type: string
        map:
          additionalProperties:
            $ref: '#/components/schemas/Color'
            x-scope:
            - ''
            - '#/components/schemas/LocalizationType'
            - '#/components/schemas/ColorMap'
          description: Map of attribute values to colors.
          type: object
        version:
          additionalProperties:
            $ref: '#/components/schemas/Color'
            x-scope:
            - ''
            - '#/components/schemas/LocalizationType'
            - '#/components/schemas/ColorMap'
          description: Map of version IDs to colors.
          type: object
      type: object
    CreateListResponse:
      properties:
        id:
          description: List of unique integers identifying created objects.
          items:
            type: integer
          type: array
        message:
          description: Message indicating successful creation.
          type: string
      type: object
    CreateResponse:
      properties:
        id:
          description: Unique integer identifying the created object.
          type: integer
        message:
          description: Message indicating successful creation.
          type: string
      type: object
    Credentials:
      properties:
        password:
          description: Account password.
          type: string
        username:
          description: Account username.
          type: string
      required:
      - username
      - password
      type: object
    EncodeConfig:
      description: Settings for archival video encode. Any additional properties will
        be passed as command line arguments to ffmpeg. If set to null, the raw file
        will be used (no transcode).
      properties:
        crf:
          default: 23
          description: Constant rate factor.
          maximum: 51
          minimum: 0
          type: integer
        preset:
          default: fast
          description: Preset for ffmpeg encoding.
          enum:
          - ultrafast
          - superfast
          - veryfast
          - faster
          - fast
          - medium
          - slow
          - slower
          - veryslow
          type: string
        tune:
          default: fastdecode
          description: Tune setting for ffmpeg.
          enum:
          - film
          - animation
          - grain
          - stillimage
          - fastdecode
          - zerolatency
          - psnr
          - ssim
          type: string
        vcodec:
          default: hevc
          description: Video codec.
          enum:
          - h264
          - hevc
          type: string
      type: object
    Favorite:
      description: Favorite object.
      properties:
        id:
          description: Unique integer identifying a favorite.
          type: integer
        meta:
          description: Unique integer identifying entity type of this localization.
          type: integer
        name:
          description: Name of the favorite.
          type: string
        page:
          default: 1
          description: Integer specifying page to display on. Should be 1-10.
          maximum: 10
          minimum: 1
          type: integer
        user:
          description: Unique integer identifying a user.
          minimum: 1
          type: integer
        values:
          additionalProperties: true
          description: Attribute name/value pairs.
          type: object
      type: object
    FavoriteSpec:
      properties:
        name:
          description: Name of the favorite.
          type: string
        page:
          default: 1
          description: Integer specifying page to display on. Should be 1-10.
          maximum: 10
          minimum: 1
          type: integer
        type:
          description: Unique integer identifying a localization type.
          minimum: 1
          type: integer
        values:
          additionalProperties: true
          description: Attribute name/value pairs.
          type: object
      type: object
    FavoriteUpdate:
      properties:
        name:
          description: Name of the favorite.
          type: string
      type: object
    Fill:
      description: Maps an attribute value or version to a color/alpha. Use `key`
        and `map` (optionally `alpha_ranges`) to map an attribute value to colors.
        Use `version` to map version IDs to colors.
      properties:
        color:
          $ref: '#/components/schemas/Color'
          x-scope:
          - ''
          - '#/components/schemas/LocalizationType'
          - '#/components/schemas/ColorMap'
          - '#/components/schemas/Fill'
        style:
          description: Type of fill effect
          enum:
          - fill
          - blur
          - gray
          type: string
      type: object
    HexColor:
      description: 'Hex color string, such as #00FF00.'
      maxLength: 7
      minLength: 7
      pattern: ^#(?:[0-9a-fA-F]{3}){1,2}$
      type: string
    Job:
      properties:
        gid:
          description: Group ID of the job.
          type: string
        id:
          description: Unique identifier of the job generated by Argo.
          type: string
        nodes:
          items:
            $ref: '#/components/schemas/JobNode'
            x-scope:
            - ''
            - '#/components/schemas/Job'
          type: array
        project:
          description: Unique integer identifying a project.
          type: integer
        start_time:
          description: Start time of this job.
          format: date-time
          nullable: true
          type: string
        status:
          description: Status of this job.
          type: string
        stop_time:
          description: Stop time of this job.
          format: date-time
          nullable: true
          type: string
        uid:
          description: Unique ID of the job.
          type: string
        user:
          description: Unique integer identifying user who submitted the job.
          type: integer
      type: object
    JobNode:
      description: Represents a step or node (for DAGs) in a job.
      properties:
        children:
          items:
            description: ID of child node.
            type: string
          type: array
        id:
          description: Unique identifier of the job node.
          type: string
        start_time:
          description: Start time of this node.
          format: date-time
          nullable: true
          type: string
        status:
          description: Status of this node.
          type: string
        stop_time:
          description: Stop time of this node.
          format: date-time
          nullable: true
          type: string
        task:
          description: Name of task performed by this node.
          type: string
      type: object
    Leaf:
      description: Leaf object.
      properties:
        attributes:
          additionalProperties:
            $ref: '#/components/schemas/AttributeValue'
            x-scope:
            - ''
            - '#/components/schemas/Leaf'
          description: Object containing attribute values.
          type: object
        id:
          description: Unique integer identifying the leaf.
          type: integer
        meta:
          description: Unique integer identifying the entity type.
          type: integer
        name:
          description: Name of the leaf.
          type: string
        parent:
          description: ID to use as parent if there is one.
          nullable: true
          type: integer
        path:
          description: Full path to leaf in hierarchy.
          type: string
        project:
          description: Unique integer identifying a project.
          type: integer
      type: object
    LeafSpec:
      additionalProperties:
        $ref: '#/components/schemas/AttributeValue'
        x-scope:
        - ''
        - '#/components/schemas/LeafSpec'
      properties:
        name:
          description: Name of the leaf.
          type: string
        parent:
          description: ID to use as parent if there is one.
          nullable: true
          type: integer
        type:
          description: Unique integer identifying a leaf type.
          type: integer
      required:
      - name
      - type
      type: object
    LeafSuggestion:
      properties:
        data:
          additionalProperties:
            $ref: '#/components/schemas/AttributeValue'
            x-scope:
            - ''
            - '#/components/schemas/LeafSuggestion'
          description: Auxiliary data associated with the leaf.
          type: object
        group:
          description: Group of the suggestion.
          type: string
        value:
          description: Name of the suggestion.
          type: string
      type: object
    LeafType:
      description: Leaf type.
      properties:
        attribute_types:
          description: Attribute type definitions.
          items:
            $ref: '#/components/schemas/AttributeType'
            x-scope:
            - ''
            - '#/components/schemas/LeafType'
          type: array
        description:
          default: ''
          description: Description of the leaf type.
          type: string
        dtype:
          description: Name of this data type, value is always "leaf".
          type: string
        id:
          description: Unique integer identifying a leaf type.
          type: integer
        name:
          description: Name of the leaf type.
          type: string
        project:
          description: Unique integer identifying project for this leaf type.
          type: integer
      type: object
    LeafTypeSpec:
      description: Leaf type spec.
      properties:
        attribute_types:
          description: Attribute type definitions.
          items:
            $ref: '#/components/schemas/AttributeType'
            x-scope:
            - ''
            - '#/components/schemas/LeafType'
          type: array
        description:
          default: ''
          description: Description of the leaf type.
          type: string
        name:
          description: Name of the leaf type.
          type: string
      type: object
    LeafTypeUpdate:
      description: Leaf type update.
      properties:
        description:
          default: ''
          description: Description of the leaf type.
          type: string
        name:
          description: Name of the leaf type.
          type: string
      type: object
    LeafUpdate:
      properties:
        attributes:
          additionalProperties:
            $ref: '#/components/schemas/AttributeValue'
            x-scope:
            - ''
            - '#/components/schemas/LeafUpdate'
          description: Attribute values to update.
          type: object
        name:
          description: Name of the leaf.
          type: string
      type: object
    Localization:
      properties:
        attributes:
          additionalProperties:
            $ref: '#/components/schemas/AttributeValue'
            x-scope:
            - ''
            - '#/components/schemas/Localization'
          description: Object containing attribute values.
          type: object
        created_datetime:
          description: Datetime this localization was created.
          format: date-time
          type: string
        email:
          description: Email of last user who modified/created this localization.
          type: string
        frame:
          description: Frame number of this localization if it is in a video.
          type: integer
        height:
          description: Normalized height of bounding box for `box` localization types.
          maximum: 1.0
          minimum: 0.0
          nullable: true
          type: number
        id:
          description: Unique integer identifying this localization.
          type: integer
        media:
          description: Unique integer identifying media of this localization.
          type: integer
        meta:
          description: Unique integer identifying entity type of this localization.
          type: integer
        modified_by:
          description: Unique integer identifying the user who last modified this
            localization.
          type: integer
        modified_datetime:
          description: Datetime this localization was last modified.
          format: date-time
          type: string
        parent:
          description: If a clone, the pk of the parent.
          nullable: true
          type: number
        project:
          description: Unique integer identifying project of this localization.
          type: integer
        thumbnail_image:
          description: URL of thumbnail corresponding to this localization.
          type: string
        u:
          description: Horizontal vector component for `line` localization types.
          maximum: 1.0
          minimum: -1.0
          nullable: true
          type: number
        user:
          description: Unique integer identifying the user who created this localization.
          type: integer
        v:
          description: Vertical vector component for `line` localization types.
          maximum: 1.0
          minimum: -1.0
          nullable: true
          type: number
        version:
          description: Unique integer identifying a version.
          type: integer
        width:
          description: Normalized width of bounding box for `box` localization types.
          maximum: 1.0
          minimum: 0.0
          nullable: true
          type: number
        x:
          description: Normalized horizontal position of left edge of bounding box
            for `box` localization types, start of line for `line` localization types,
            or position of dot for `dot` localization types.
          maximum: 1.0
          minimum: 0.0
          nullable: true
          type: number
        y:
          description: Normalized vertical position of top edge of bounding box for
            `box` localization types, start of line for `line` localization types,
            or position of dot for `dot` localization types.
          maximum: 1.0
          minimum: 0.0
          nullable: true
          type: number
      type: object
    LocalizationSpec:
      additionalProperties:
        $ref: '#/components/schemas/AttributeValue'
        x-scope:
        - ''
        - '#/components/schemas/LocalizationSpec'
      description: Localization creation spec. Attribute key/values must be included
        in the base object.
      properties:
        frame:
          description: Frame number of this localization if it is in a video.
          type: integer
        height:
          description: Normalized height of bounding box for `box` localization types.
          maximum: 1.0
          minimum: 0.0
          nullable: true
          type: number
        media_id:
          description: Unique integer identifying a media.
          type: integer
        parent:
          description: If a clone, the pk of the parent.
          nullable: true
          type: number
        type:
          description: Unique integer identifying a localization type.
          type: integer
        u:
          description: Horizontal vector component for `line` localization types.
          maximum: 1.0
          minimum: -1.0
          nullable: true
          type: number
        v:
          description: Vertical vector component for `line` localization types.
          maximum: 1.0
          minimum: -1.0
          nullable: true
          type: number
        version:
          description: Unique integer identifying the version.
          type: integer
        width:
          description: Normalized width of bounding box for `box` localization types.
          maximum: 1.0
          minimum: 0.0
          nullable: true
          type: number
        x:
          description: Normalized horizontal position of left edge of bounding box
            for `box` localization types, start of line for `line` localization types,
            or position of dot for `dot` localization types.
          maximum: 1.0
          minimum: 0.0
          nullable: true
          type: number
        y:
          description: Normalized vertical position of top edge of bounding box for
            `box` localization types, start of line for `line` localization types,
            or position of dot for `dot` localization types.
          maximum: 1.0
          minimum: 0.0
          nullable: true
          type: number
      required:
      - media_id
      - type
      - frame
      type: object
    LocalizationType:
      description: Localization type.
      properties:
        attribute_types:
          description: Attribute type definitions.
          items:
            $ref: '#/components/schemas/AttributeType'
            x-scope:
            - ''
            - '#/components/schemas/LocalizationType'
          type: array
        colorMap:
          $ref: '#/components/schemas/ColorMap'
          x-scope:
          - ''
          - '#/components/schemas/LocalizationType'
        description:
          description: Description of the localization type.
          type: string
        dtype:
          description: Shape of this localization type.
          enum:
          - box
          - line
          - dot
          type: string
        grouping_default:
          default: true
          description: Whether to group elements in the UI by default.
          type: boolean
        id:
          description: Unique integer identifying a localization type.
          type: integer
        line_width:
          description: Width of the line used to draw the localization.
          minimum: 1
          type: integer
        media:
          description: List of integers identifying media types that this localization
            type may apply to.
          items:
            minimum: 1
            type: integer
          type: array
        name:
          description: Name of the localization type.
          type: string
        project:
          description: Unique integer identifying project for this leaf type.
          type: integer
        visible:
          default: true
          description: Whether this type should be displayed in the UI.
          type: boolean
      type: object
    LocalizationTypeSpec:
      properties:
        attribute_types:
          description: Attribute type definitions.
          items:
            $ref: '#/components/schemas/AttributeType'
            x-scope:
            - ''
            - '#/components/schemas/LocalizationType'
          type: array
        colorMap:
          $ref: '#/components/schemas/ColorMap'
          x-scope:
          - ''
          - '#/components/schemas/LocalizationType'
        description:
          description: Description of the localization type.
          type: string
        dtype:
          description: Shape of this localization type.
          enum:
          - box
          - line
          - dot
          type: string
        grouping_default:
          default: true
          description: Whether to group elements in the UI by default.
          type: boolean
        line_width:
          description: Width of the line used to draw the localization.
          minimum: 1
          type: integer
        media_types:
          description: List of integers identifying media types that this localization
            type may apply to.
          items:
            minimum: 1
            type: integer
          minItems: 1
          type: array
        name:
          description: Name of the localization type.
          type: string
        visible:
          default: true
          description: Whether this type should be displayed in the UI.
          type: boolean
      required:
      - name
      - dtype
      - media_types
      type: object
    LocalizationTypeUpdate:
      description: Localization type update.
      properties:
        colorMap:
          $ref: '#/components/schemas/ColorMap'
          x-scope:
          - ''
          - '#/components/schemas/LocalizationType'
        description:
          description: Description of the localization type.
          type: string
        grouping_default:
          default: true
          description: Whether to group elements in the UI by default.
          type: boolean
        line_width:
          description: Width of the line used to draw the localization.
          minimum: 1
          type: integer
        name:
          description: Name of the localization type.
          type: string
        visible:
          default: true
          description: Whether this type should be displayed in the UI.
          type: boolean
      type: object
    LocalizationUpdate:
      nullable: false
      properties:
        attributes:
          additionalProperties:
            $ref: '#/components/schemas/AttributeValue'
            nullable: false
            x-scope:
            - ''
            - '#/components/schemas/LocalizationUpdate'
          description: Object containing attribute values.
          nullable: false
          type: object
        frame:
          description: Frame number of this localization if it is in a video.
          type: integer
        height:
          description: Normalized height of bounding box for `box` localization types.
          maximum: 1.0
          minimum: 0.0
          nullable: true
          type: number
        parent:
          description: If a clone, the pk of the parent.
          nullable: true
          type: number
        u:
          description: Horizontal vector component for `line` localization types.
          maximum: 1.0
          minimum: -1.0
          nullable: true
          type: number
        v:
          description: Vertical vector component for `line` localization types.
          maximum: 1.0
          minimum: -1.0
          nullable: true
          type: number
        width:
          description: Normalized width of bounding box for `box` localization types.
          maximum: 1.0
          minimum: 0.0
          nullable: true
          type: number
        x:
          description: Normalized horizontal position of left edge of bounding box
            for `box` localization types, start of line for `line` localization types,
            or position of dot for `dot` localization types.
          maximum: 1.0
          minimum: 0.0
          nullable: true
          type: number
        y:
          description: Normalized vertical position of top edge of bounding box for
            `box` localization types, start of line for `line` localization types,
            or position of dot for `dot` localization types.
          maximum: 1.0
          minimum: 0.0
          nullable: true
          type: number
      type: object
    Media:
      properties:
        attributes:
          additionalProperties:
            $ref: '#/components/schemas/AttributeValue'
            x-scope:
            - ''
            - '#/components/schemas/Media'
          description: Object containing attribute values.
          type: object
        codec:
          description: Codec for videos.
          type: string
        created_by:
          description: Unique integer identifying user who created this media.
          type: integer
        created_datetime:
          description: Datetime when this media was created.
          type: string
        file:
          description: URL of the media file. Relative to https://<domain>/media/.
          type: string
        fps:
          description: Frame rate for videos.
          type: integer
        gid:
          description: Group ID for the upload group of this media.
          nullable: false
          type: string
        height:
          description: Vertical resolution in pixels.
          type: integer
        id:
          description: Unique integer identifying this media.
          type: integer
        last_edit_end:
          description: Datetime of the end of the session when this media or its annotations
            were last edited.
          format: date-time
          nullable: false
          type: string
        last_edit_start:
          description: Datetime of the start of the session when this media or its
            annotations were last edited.
          format: date-time
          nullable: false
          type: string
        md5:
          description: MD5 checksum of the media file.
          type: string
        media_files:
          $ref: '#/components/schemas/MediaFiles'
          x-scope:
          - ''
          - '#/components/schemas/Media'
        meta:
          description: Unique integer identifying entity type of this media.
          type: integer
        modified_by:
          description: Unique integer identifying user who last modified this media.
          type: integer
        modified_datetime:
          description: Datetime when this media was last modified.
          type: string
        name:
          description: Name of the media.
          type: string
        num_frames:
          description: Number of frames for videos.
          type: integer
        original:
          description: DEPRECATED. Use media_files. Stores path to original media
            file.
          type: string
        project:
          description: Unique integer identifying project of this media.
          type: integer
        segment_info:
          description: Path to segment info.
          type: string
        thumbnail:
          description: URL of the thumbnail. Relative to https://<domain>/media/.
          type: string
        thumbnail_gif:
          description: URL of the thumbnail gif for videos. Relative to https://<domain>/media/.
          type: string
        uid:
          description: Unique ID for the upload of this media.
          nullable: false
          type: string
        width:
          description: Horizontal resolution in pixels.
          type: integer
      type: object
    MediaFiles:
      description: Object containing upload urls for the transcoded file and corresponding
        `VideoDefinition`.
      nullable: false
      properties:
        archival:
          items:
            $ref: '#/components/schemas/VideoDefinition'
            nullable: false
            x-scope:
            - ''
            - '#/components/schemas/Media'
            - '#/components/schemas/MediaFiles'
          nullable: false
          type: array
        audio:
          items:
            $ref: '#/components/schemas/AudioDefinition'
            x-scope:
            - ''
            - '#/components/schemas/Media'
            - '#/components/schemas/MediaFiles'
          type: array
        ids:
          description: If multi-stream list of ids of sub-videos
          items:
            type: integer
          type: array
        layout:
          description: 2-element array to define rxc layout
          items:
            type: integer
          type: array
        quality:
          description: Resolution to fetch on each sub-video
          type: integer
        streaming:
          items:
            $ref: '#/components/schemas/VideoDefinition'
            nullable: false
            x-scope:
            - ''
            - '#/components/schemas/Media'
            - '#/components/schemas/MediaFiles'
          nullable: false
          type: array
      type: object
    MediaNext:
      properties:
        next:
          minimum: 0
          type: integer
      type: object
    MediaPrev:
      properties:
        prev:
          minimum: 0
          type: integer
      type: object
    MediaSpec:
      nullable: false
      properties:
        attributes:
          description: Attributes for the media
          nullable: true
          type: object
        codec:
          description: Codec for videos.
          nullable: true
          type: string
        fps:
          description: Frame rate for videos.
          nullable: true
          type: integer
        gid:
          description: Group ID for the upload group of this media.
          nullable: false
          type: string
        height:
          description: Vertical resolution in pixels.
          nullable: true
          type: integer
        md5:
          description: MD5 sum of the media file.
          nullable: false
          type: string
        name:
          description: Name of the file.
          nullable: false
          type: string
        num_frames:
          description: Number of frames for videos.
          nullable: true
          type: integer
        progress_name:
          description: Replaces name in progress message.
          type: string
        section:
          description: Media section name.
          nullable: false
          type: string
        thumbnail_gif_url:
          description: Upload URL for the video gif thumbnail if already generated.
          type: string
        thumbnail_url:
          description: Upload URL for the media thumbnail if already generated.
          type: string
        type:
          description: Unique integer identifying a media type. Use -1 to automatically
            select the media type if only one media type exists in a project.
          minimum: -1
          nullable: false
          type: integer
        uid:
          description: Unique ID for the upload of this media.
          nullable: false
          type: string
        url:
          description: Upload URL for the image if this is an image type. If not an
            image, this field is ignored.
          type: string
        width:
          description: Horizontal resolution in pixels.
          nullable: true
          type: integer
      required:
      - type
      - section
      - name
      - md5
      type: object
    MediaStats:
      properties:
        count:
          minimum: 0
          type: integer
        download_size:
          minimum: 0
          type: integer
        duration:
          minimum: 0
          type: number
        total_size:
          minimum: 0
          type: integer
      type: object
    MediaType:
      description: Media type.
      properties:
        archive_config:
          description: Archive config definitions. If null, the raw file will be uploaded
            to Tator.
          items:
            $ref: '#/components/schemas/ArchiveConfig'
            x-scope:
            - ''
            - '#/components/schemas/MediaType'
          type: array
        attribute_types:
          description: Attribute type definitions.
          items:
            $ref: '#/components/schemas/AttributeType'
            x-scope:
            - ''
            - '#/components/schemas/MediaType'
          type: array
        default_volume:
          description: Default audio volume for this media type.
          maximum: 100
          minimum: 0
          type: integer
        description:
          default: ''
          description: Description of the media type.
          type: string
        dtype:
          description: Type of the media, image or video.
          enum:
          - image
          - video
          - multi
          type: string
        file_format:
          description: File extension. If omitted, any recognized file extension for
            the given dtype is accepted for upload. Do not include a dot prefix.
          maxLength: 4
          type: string
        id:
          description: Unique integer identifying a media type.
          type: integer
        name:
          description: Name of the media type.
          type: string
        overlay_config:
          additionalProperties: true
          description: Overlay configuration
          type: object
        project:
          description: Unique integer identifying project for this media type.
          type: integer
        streaming_config:
          description: Streaming config defintion. If null, the default will be used.
          items:
            $ref: '#/components/schemas/ResolutionConfig'
            x-scope:
            - ''
            - '#/components/schemas/MediaType'
          type: array
      type: object
    MediaTypeSpec:
      properties:
        archive_config:
          description: Archive config definitions. If null, the raw file will be uploaded
            to Tator.
          items:
            $ref: '#/components/schemas/ArchiveConfig'
            x-scope:
            - ''
            - '#/components/schemas/MediaType'
          type: array
        attribute_types:
          description: Attribute type definitions.
          items:
            $ref: '#/components/schemas/AttributeType'
            x-scope:
            - ''
            - '#/components/schemas/MediaType'
          type: array
        default_volume:
          description: Default audio volume for this media type.
          maximum: 100
          minimum: 0
          type: integer
        description:
          default: ''
          description: Description of the media type.
          type: string
        dtype:
          description: Type of the media, image or video.
          enum:
          - image
          - video
          - multi
          type: string
        file_format:
          description: File extension. If omitted, any recognized file extension for
            the given dtype is accepted for upload. Do not include a dot prefix.
          maxLength: 4
          type: string
        name:
          description: Name of the media type.
          type: string
        overlay_config:
          additionalProperties: true
          description: Overlay configuration
          type: object
        streaming_config:
          description: Streaming config defintion. If null, the default will be used.
          items:
            $ref: '#/components/schemas/ResolutionConfig'
            x-scope:
            - ''
            - '#/components/schemas/MediaType'
          type: array
      required:
      - name
      - dtype
      type: object
    MediaTypeUpdate:
      properties:
        archive_config:
          description: Archive config definitions. If null, the raw file will be uploaded
            to Tator.
          items:
            $ref: '#/components/schemas/ArchiveConfig'
            x-scope:
            - ''
            - '#/components/schemas/MediaType'
          type: array
        description:
          default: ''
          description: Description of the media type.
          type: string
        file_format:
          description: File extension. If omitted, any recognized file extension for
            the given dtype is accepted for upload. Do not include a dot prefix.
          maxLength: 4
          type: string
        name:
          description: Name of the media type.
          type: string
        streaming_config:
          description: Streaming config defintion. If null, the default will be used.
          items:
            $ref: '#/components/schemas/ResolutionConfig'
            x-scope:
            - ''
            - '#/components/schemas/MediaType'
          type: array
      type: object
    MediaUpdate:
      nullable: false
      properties:
        attributes:
          additionalProperties:
            $ref: '#/components/schemas/AttributeValue'
            x-scope:
            - ''
            - '#/components/schemas/Media'
          description: Object containing attribute values.
          type: object
        codec:
          description: Codec of the original video.
          nullable: false
          type: string
        fps:
          description: Frame rate of the video.
          nullable: false
          type: number
        height:
          description: Pixel height of the video.
          nullable: false
          type: integer
        last_edit_end:
          description: Datetime of the end of the session when this media or its annotations
            were last edited.
          format: date-time
          nullable: false
          type: string
        last_edit_start:
          description: Datetime of the start of the session when this media or its
            annotations were last edited.
          format: date-time
          nullable: false
          type: string
        media_files:
          $ref: '#/components/schemas/MediaFiles'
          x-scope:
          - ''
          - '#/components/schemas/Media'
        name:
          description: Name of the media.
          type: string
        num_frames:
          description: Number of frames in the video.
          minimum: 0
          nullable: false
          type: integer
        thumbnail_gif_url:
          description: Upload URL for the thumbnail gif.
          nullable: false
          type: string
        thumbnail_url:
          description: Upload URL for the thumbnail.
          nullable: false
          type: string
        width:
          description: Pixel width of the video.
          nullable: false
          type: integer
      type: object
    Membership:
      description: Membership object.
      properties:
        id:
          description: Unique integer identifying a membership.
          type: integer
        permission:
          description: User permission level for the project.
          enum:
          - View Only
          - Can Edit
          - Can Transfer
          - Can Execute
          - Full Control
          type: string
        user:
          description: Unique integer identifying a user.
          minimum: 1
          type: integer
        username:
          description: Username for the membership.
          type: string
      type: object
    MembershipSpec:
      properties:
        permission:
          description: User permission level for the project.
          enum:
          - View Only
          - Can Edit
          - Can Transfer
          - Can Execute
          - Full Control
          type: string
        user:
          description: Unique integer identifying a user.
          minimum: 1
          type: integer
      type: object
    MembershipUpdate:
      properties:
        permission:
          description: User permission level for the project.
          enum:
          - View Only
          - Can Edit
          - Can Transfer
          - Can Execute
          - Full Control
          type: string
      type: object
    MessageResponse:
      properties:
        message:
          description: Message explaining response.
          type: string
      type: object
    MoveVideoSpec:
      nullable: false
      properties:
        media_files:
          $ref: '#/components/schemas/MediaFiles'
          nullable: false
          x-scope:
          - ''
          - '#/components/schemas/MoveVideoSpec'
      required:
      - media_files
      type: object
    NotFoundResponse:
      properties:
        message:
          description: Message explaining not found error.
          type: string
      type: object
    NotifySpec:
      nullable: false
      properties:
        message:
          description: Message to send to administrators.
          nullable: false
          type: string
        sendAsFile:
          description: Whether to send message as a file. (0 or 1)
          type: integer
      required:
      - message
      type: object
    Project:
      description: Project object.
      properties:
        id:
          description: Unique integer identifying the project.
          type: integer
        name:
          description: Name of the project.
          type: string
        num_files:
          description: Number of files in the project.
          type: integer
        permission:
          description: Permission level of user making request.
          type: string
        size:
          description: Size of the project in bytes.
          type: integer
        summary:
          default: ''
          description: Summary of the project.
          type: string
        thumb:
          description: URL of thumbnail used to represent the project.
          type: string
        usernames:
          description: List of usernames of project members.
          items:
            type: string
          type: array
      type: object
    ProjectSpec:
      properties:
        name:
          description: Name of the project.
          type: string
        summary:
          default: ''
          description: Summary of the project.
          type: string
      required:
      - name
      type: object
    ResolutionConfig:
      description: 'Settings for streaming video encode. Any additional properties
        will be passed as command line arguments to ffmpeg. '
      properties:
        crf:
          default: 23
          description: Constant rate factor.
          maximum: 51
          minimum: 0
          type: integer
        resolution:
          description: Vertical Resolution
          maximum: 4096
          minimum: 0
          type: integer
        vcodec:
          default: h264
          description: Video codec.
          enum:
          - h264
          type: string
      type: object
    RgbColor:
      description: RGB three element array with values 0-255.
      items:
        maximum: 255
        minimum: 0
        type: integer
      maxItems: 3
      minItems: 3
      type: array
    RgbaColor:
      description: RGBA four element array with values 0-255.
      items:
        maximum: 255
        minimum: 0
        type: integer
      maxItems: 4
      minItems: 4
      type: array
    S3StorageConfig:
      description: Settings for AWS S3 archival storage. If not given, the archival
        video will be stored on the Tator website.
      properties:
        aws_access_key:
          description: AWS access key.
          type: string
        aws_secret_access_key:
          description: AWS secret access key.
          type: string
        bucket_name:
          description: Name of bucket.
          type: string
      type: object
    Section:
      properties:
        annotation_bools:
          description: List of elasticsearch boolean queries that should be applied
            to annotations. These are applied to the boolean query "filter" list.
          items:
            additionalProperties: true
            type: object
          type: array
        id:
          description: Unique integer identifying the section.
          type: integer
        lucene_string:
          description: Lucene query syntax search string.
          type: string
        media_bools:
          description: List of elasticsearch boolean queries that should be applied
            to media. These are applied to the boolean query "filter" list.
          items:
            additionalProperties: true
            type: object
          type: array
        name:
          description: Unique name of the algorithm workflow.
          type: string
        project:
          description: Unique integer identifying the project associated with the
            section.
          type: integer
        tator_user_sections:
          description: Attribute that is applied to media to identify membership to
            a section.
          type: string
      type: object
    SectionAnalysis:
      additionalProperties:
        $ref: '#/components/schemas/AttributeValue'
        x-scope:
        - ''
        - '#/components/schemas/SectionAnalysis'
      description: Analysis outputs.
      type: object
    SectionSpec:
      properties:
        annotation_bools:
          description: List of elasticsearch boolean queries that should be applied
            to annotations. These are applied to the boolean query "filter" list.
          items:
            additionalProperties: true
            type: object
          type: array
        lucene_string:
          description: Lucene query syntax search string.
          type: string
        media_bools:
          description: List of elasticsearch boolean queries that should be applied
            to media. These are applied to the boolean query "filter" list.
          items:
            additionalProperties: true
            type: object
          type: array
        name:
          description: Unique name of the algorithm workflow.
          type: string
        tator_user_sections:
          description: Attribute that is applied to media to identify membership to
            a section.
          type: string
      required:
      - name
      type: object
    State:
      properties:
        attributes:
          additionalProperties:
            $ref: '#/components/schemas/AttributeValue'
            x-scope:
            - ''
            - '#/components/schemas/State'
          description: Object containing attribute values.
          type: object
        frame:
          description: Frame number this state applies to.
          type: integer
        id:
          description: Unique integer identifying the state.
          type: integer
        localizations:
          description: List of localization IDs that this state applies to.
          items:
            type: integer
          type: array
        media:
          description: List of media IDs that this state applies to.
          items:
            type: integer
          type: array
        meta:
          description: Unique integer identifying the entity type.
          type: integer
        version:
          description: Unique integer identifying the version.
          type: integer
      type: object
    StateMergeUpdate:
      properties:
        merge_state_id:
          description: Unique integer identifying the state whose localizations will
            merge with this state.
          type: integer
      required:
      - merge_state_id
      type: object
    StateSpec:
      additionalProperties:
        $ref: '#/components/schemas/AttributeValue'
        x-scope:
        - ''
        - '#/components/schemas/StateSpec'
      properties:
        frame:
          description: Frame number this state applies to.
          type: integer
        localization_ids:
          description: List of localization IDs that this state applies to.
          items:
            type: integer
          type: array
        media_ids:
          description: List of media IDs that this state applies to.
          items:
            type: integer
          type: array
        type:
          description: Unique integer identifying a state type.
          type: integer
        version:
          description: Unique integer identifying the version.
          type: integer
      required:
      - media_ids
      - type
      type: object
    StateTrimUpdate:
      properties:
        endpoint:
          description: End point to trim to using the provided frame number.
          enum:
          - start
          - end
          type: string
        frame:
          description: Frame number of new end point
          minimum: 0
          type: integer
      required:
      - frame
      - endpoint
      type: object
    StateType:
      description: State type.
      properties:
        association:
          description: Type of object this state type is associated with.
          enum:
          - Media
          - Frame
          - Localization
          type: string
        attribute_types:
          description: Attribute type definitions.
          items:
            $ref: '#/components/schemas/AttributeType'
            x-scope:
            - ''
            - '#/components/schemas/StateType'
          type: array
        delete_child_localizations:
          default: false
          description: 'True if child localizations should be deleted when this state
            is deleted. Localizations will only be deleted if they are not associated
            with another state. '
          type: boolean
        description:
          description: Description of the state type.
          type: string
        dtype:
          description: String indicating data type. Always equal to "state".
          type: string
        grouping_default:
          default: true
          description: Whether to group elements in the UI by default.
          type: boolean
        id:
          description: Unique integer identifying a state type.
          type: integer
        interpolation:
          default: latest
          description: Interpolation method used by the web interface.
          enum:
          - none
          - latest
          - attr_style_range
          type: string
        media:
          description: List of integers identifying media types that this state type
            may apply to.
          items:
            minimum: 1
            type: integer
          type: array
        name:
          description: Name of the state type.
          type: string
        project:
          description: Unique integer identifying project for this state type.
          type: integer
        visible:
          description: Whether this state type should be displayed.
          type: boolean
      type: object
    StateTypeSpec:
      properties:
        association:
          description: Type of object this state type is associated with.
          enum:
          - Media
          - Frame
          - Localization
          type: string
        attribute_types:
          description: Attribute type definitions.
          items:
            $ref: '#/components/schemas/AttributeType'
            x-scope:
            - ''
            - '#/components/schemas/StateType'
          type: array
        delete_child_localizations:
          default: false
          description: 'True if child localizations should be deleted when this state
            is deleted. Localizations will only be deleted if they are not associated
            with another state. '
          type: boolean
        description:
          description: Description of the state type.
          type: string
        grouping_default:
          default: true
          description: Whether to group elements in the UI by default.
          type: boolean
        interpolation:
          default: latest
          description: Interpolation method used by the web interface.
          enum:
          - none
          - latest
          - attr_style_range
          type: string
        media_types:
          description: List of integers identifying media types that this state type
            may apply to.
          items:
            minimum: 1
            type: integer
          minItems: 1
          type: array
        name:
          description: Name of the state type.
          type: string
        visible:
          description: Whether this state type should be displayed.
          type: boolean
      required:
      - name
      - association
      - media_types
      type: object
    StateTypeUpdate:
      properties:
        delete_child_localizations:
          default: false
          description: 'True if child localizations should be deleted when this state
            is deleted. Localizations will only be deleted if they are not associated
            with another state. '
          type: boolean
        description:
          description: Description of the state type.
          type: string
        grouping_default:
          default: true
          description: Whether to group elements in the UI by default.
          type: boolean
        name:
          description: Name of the state type.
          type: string
        visible:
          description: Whether this state type should be displayed.
          type: boolean
      type: object
    StateUpdate:
      properties:
        attributes:
          additionalProperties:
            $ref: '#/components/schemas/AttributeValue'
            x-scope:
            - ''
            - '#/components/schemas/StateUpdate'
          description: Object containing attribute values.
          type: object
        frame:
          description: Frame number this state applies to.
          type: integer
        localization_ids_add:
          description: List of new localization IDs that this state applies to.
          items:
            type: integer
          type: array
        localization_ids_remove:
          description: List of new localization IDs that this state applies to.
          items:
            type: integer
          type: array
      type: object
    TemporaryFile:
      properties:
        created_datetime:
          description: Datetime when this temporary file was created.
          type: string
        eol_datetime:
          description: Datetime when this temporary file may be deleted.
          type: string
        id:
          description: Unique integer identifying a temporary file.
          type: integer
        lookup:
          description: md5hash of lookup parameters
          type: string
        name:
          description: Unique name for the temporary file
          type: string
        path:
          description: Full URL to the temporary file.
          type: string
        project:
          description: Unique integer identifying a project.
          type: integer
        user:
          description: Unique integer identifying user who created this file.
          type: integer
      type: object
    TemporaryFileSpec:
      properties:
        hours:
          default: 24
          description: Number of hours file is to be kept alive
          maximum: 24
          minimum: 1
          type: integer
        lookup:
          description: md5hash of lookup parameters
          type: string
        name:
          description: Unique name for the temporary file
          type: string
        url:
          description: URL for the temporary file
          type: string
      required:
      - name
      - url
      - lookup
      type: object
    Token:
      properties:
        token:
          description: API token.
          type: string
      type: object
    Transcode:
      properties:
        gid:
          description: UUID identifying the job group.
          type: string
        message:
          description: Message indicating transcode started successfully.
          type: string
        uid:
          description: UUID identifying the job.
          type: string
      type: object
    TranscodeSpec:
      nullable: false
      properties:
        attributes:
          description: Attributes to apply upon upload
          nullable: true
          type: object
        gid:
          description: UUID generated for the job group. This value may be associated
            with messages generated during upload via the `Progress` endpoint, or
            it may be newly generated. The transcode workflow will use this value
            to generate progress messages.
          format: uuid
          nullable: false
          type: string
        md5:
          description: MD5 sum of the media file.
          nullable: false
          type: string
        media_id:
          description: ID of an existing media. If given, this media will be used
            for the transcode operation rather than creating a new object.
          nullable: true
          type: integer
        name:
          description: Name of the file.
          nullable: false
          type: string
        section:
          description: Media section name to upload to.
          nullable: false
          type: string
        type:
          description: Unique integer identifying a video type.
          nullable: false
          type: integer
        uid:
          description: UUID generated for the individual job. This value may be associated
            with messages generated during upload via the `Progress` endpoint, or
            it may be newly generated. The transcode workflow will use this value
            to generate progress messages.
          nullable: false
          type: string
        url:
          description: Upload URL for the raw video.
          nullable: false
          type: string
      required:
      - type
      - gid
      - uid
      - url
      - section
      - name
      - md5
      type: object
    User:
      properties:
        email:
          description: Email address of user.
          type: string
        first_name:
          description: First name of user.
          type: string
        id:
          description: Unique integer identifying a user.
          type: integer
        last_name:
          description: Last name of user.
          type: string
        username:
          description: Username of user.
          type: string
      type: object
    UserUpdate:
      properties:
        email:
          description: Email address of user.
          type: string
        first_name:
          description: First name of user.
          type: string
        last_name:
          description: Last name of user.
          type: string
        username:
          description: Username of user.
          type: string
      type: object
    Version:
      description: Version object.
      properties:
        bases:
          description: Array of other version IDs that are dependencies of this version.
          items:
            type: integer
          minimum: 0
          type: array
        created_by:
          description: Name of user who created the last unmodified annotation in
            this version.
          type: string
        description:
          default: ''
          description: Description of the version.
          type: string
        id:
          description: Unique integer identifying a membership.
          type: integer
        name:
          description: Name of the version.
          type: string
        number:
          description: Version number.
          type: integer
        project:
          description: Unique integer identifying a project.
          type: integer
        show_empty:
          default: true
          description: Whether to show this version on media for which no annotations
            exist.
          type: boolean
      type: object
    VersionSpec:
      properties:
        bases:
          description: Array of other version IDs that are dependencies of this version.
          items:
            type: integer
          minimum: 0
          type: array
        description:
          default: ''
          description: Description of the version.
          type: string
        name:
          description: Name of the version.
          type: string
        show_empty:
          default: true
          description: Whether to show this version on media for which no annotations
            exist.
          type: boolean
      required:
      - name
      type: object
    VersionUpdate:
      properties:
        bases:
          description: Array of other version IDs that are dependencies of this version.
          items:
            type: integer
          minimum: 0
          type: array
        description:
          default: ''
          description: Description of the version.
          type: string
        name:
          description: Name of the version.
          type: string
        show_empty:
          default: true
          description: Whether to show this version on media for which no annotations
            exist.
          type: boolean
      type: object
    VideoClip:
      properties:
        file:
          $ref: '#/components/schemas/TemporaryFile'
          x-scope:
          - ''
          - '#/components/schemas/VideoClip'
        segment_end_frames:
          description: List of end frames of segments that form the clip. Index associated
            with segment_start_frames.
          items:
            type: integer
          type: array
        segment_start_frames:
          description: List of start frames of segments that form the clip. Index
            associated with segment_end_frames.
          items:
            type: integer
          type: array
      type: object
    VideoDefinition:
      nullable: false
      properties:
        bit_rate:
          description: Bit rate in bits per second
          nullable: false
          type: integer
        codec:
          description: Human readable codec.
          nullable: false
          type: string
        codec_description:
          description: Description other than codec.
          nullable: false
          type: string
        codec_mime:
          description: 'Example mime: "video/mp4; codecs="avc1.64001e"". Only relevant
            for streaming files, will assume example above if not present.'
          type: string
        host:
          description: If supplied will use this instead of currently connected host,
            e.g. https://example.com
          type: string
        http_auth:
          description: If specified will be used for HTTP authorization in request
            for media, i.e. "bearer <token>".
          type: string
        path:
          description: Relative URL to the file.
          type: string
        resolution:
          description: Resolution of the video in pixels (height, width).
          items:
            minimum: 1
            nullable: false
            type: integer
          maxLength: 2
          minLength: 2
          nullable: false
          type: array
        segment_info:
          description: Path to json file containing segment info.
          type: string
        segments_url:
          description: Required when this object is used with the MoveVideo endpoint,
            this field is the upload URL of the segments file. It is is used to determine
            the src path.
          nullable: false
          type: string
        size:
          description: File size in bytes.
          nullable: false
          type: integer
        url:
          description: Required when this object is used with the MoveVideo endpoint,
            this field is the upload URL of the video file. It is is used to determine
            the src path.
          nullable: false
          type: string
      required:
      - codec
      - resolution
      type: object
  securitySchemes:
    TokenAuth:
      in: header
      name: Authorization
      type: apiKey
info:
  title: Tator REST API
  version: v1
openapi: 3.0.2
paths:
  /rest/Algorithm/{id}:
    delete:
      description: Delete registered algorithm workflow
      operationId: DeleteAlgorithm
      parameters:
      - description: A unique integer identifying a registered algorithm workflow.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful deletion of registered algorithm.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    get:
      description: Get registered algorithm workflow
      operationId: GetAlgorithm
      parameters:
      - description: A unique integer identifying a registered algorithm workflow.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Algorithm'
          description: Successful retrieval of algorithm.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    patch:
      description: Updated registered algorithm workflow
      operationId: UpdateAlgorithm
      parameters:
      - description: A unique integer identifying a registered algorithm workflow.
        in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            example:
              manifest: Server path to new manifest file
              name: New unique name
            schema:
              $ref: '#/components/schemas/AlgorithmSpec'
        required: true
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/AlgorithmLaunch/{project}:
    post:
      description: "Launch a registered algorithm.\n\nThis will create one or more\
        \ Argo workflows that execute the named algorithm\nregistration. To get a\
        \ list of available algorithms, use the `Algorithms` endpoint.\nA media list\
        \ will be submitted for processing using either a query string or \na list\
        \ of media IDs. If neither are included, the algorithm will be launched on\n\
        all media in the project. \n\nMedia is divided into batches for based on the\
        \ `files_per_job` field of the \n`Algorithm` object. One batch is submitted\
        \ to each Argo workflow.\n\nSubmitted algorithm jobs may be cancelled via\
        \ the `Job` or `JobGroup` endpoints.\n"
      operationId: AlgorithmLaunch
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            examples:
              by_ids:
                summary: Launch by media ids
                value:
                  algorithm_name: My Algorithm
                  media_ids:
                  - 1
                  - 5
                  - 10
              by_query:
                summary: Launch by query
                value:
                  algorithm_name: My Algorithm
                  media_query: ?project=1&type=2
            schema:
              $ref: '#/components/schemas/AlgorithmLaunchSpec'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlgorithmLaunch'
          description: Successful launch of algorithm.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/Algorithms/{project}:
    get:
      description: 'Get registered algorithms.

        '
      operationId: GetAlgorithmList
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Algorithm'
                type: array
          description: Successful retrieval of registered algorithms.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    post:
      description: 'Register an algorithm argo workflow.


        This endpoint replicates the algorithm registration through the admin portal.

        The provided manifest file must have been uploaded and saved by the

        SaveAlgorithmManifest endpoint. This endpoint will respond with an error if

        one of the following conditions occur:


        - Provided workflow name is not unique (across projects)

        - Not all the required fields are present

        - There are syntax errors with the given manifest file

        '
      operationId: RegisterAlgorithm
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlgorithmSpec'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
          description: Successful creation of registered algorithm.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/Analyses/{project}:
    get:
      description: 'Get analysis.


        Analysis objects are used to display information about filtered media lists

        and/or annotations on the project detail page of the web UI. Currently only

        counting analysis is supported.

        '
      operationId: GetAnalysisList
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Analysis'
                type: array
          description: Successful retrieval of analyses.
        '400':
          description: Bad request.
        '404':
          description: Failure to find project with given ID.
      tags:
      - Tator
    post:
      description: 'Create analysis.


        Analysis objects are used to display information about filtered media lists

        and/or annotations on the project detail page of the web UI. Currently only

        counting analysis is supported.

        '
      operationId: CreateAnalysis
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            examples:
              count_all:
                summary: Count all entities of the given type
                value:
                  data_query: _meta:1
                  name: Boxes
              count_filter:
                summary: Count all entities with confidence > 0.5
                value:
                  data_query: Confidence:>0.5
                  name: High confidence boxes
            schema:
              $ref: '#/components/schemas/AnalysisSpec'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
          description: Successful creation of analysis.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/Analysis/{id}:
    delete:
      description: Delete analysis record
      operationId: DeleteAnalysis
      parameters:
      - description: A unique integer identifying an analysis record.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful deletion of analysis record.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    get:
      description: Get analysis record
      operationId: GetAnalysis
      parameters:
      - description: A unique integer identifying an analysis record.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Analysis'
          description: Successful retrieval of analysis record.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    patch:
      description: Update analysis record
      operationId: UpdateAnalysis
      parameters:
      - description: A unique integer identifying an analysis record.
        in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            example:
              data_query: New string for analysis record
              name: New name
            schema:
              $ref: '#/components/schemas/AnalysisSpec'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful update of analysis record.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/Bookmark/{id}:
    delete:
      description: 'Delete bookmark.


        Bookmarks are saved links that can be used to mark videos/frames of interest.

        They are scoped to a project and user, so if a user requests Bookmarks for
        a

        project they will only receive the Bookmarks created by them.

        '
      operationId: DeleteBookmark
      parameters:
      - description: A unique integer identifying a bookmark.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful deletion of bookmark.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    get:
      description: 'Get bookmark.


        Bookmarks are saved links that can be used to mark videos/frames of interest.

        They are scoped to a project and user, so if a user requests Bookmarks for
        a

        project they will only receive the Bookmarks created by them.

        '
      operationId: GetBookmark
      parameters:
      - description: A unique integer identifying a bookmark.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bookmark'
          description: Successful retrieval of bookmark.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    patch:
      description: 'Update bookmark.


        Bookmarks are saved links that can be used to mark videos/frames of interest.

        They are scoped to a project and user, so if a user requests Bookmarks for
        a

        project they will only receive the Bookmarks created by them.

        '
      operationId: UpdateBookmark
      parameters:
      - description: A unique integer identifying a bookmark.
        in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookmarkUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful update of bookmark.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/Bookmarks/{project}:
    get:
      description: 'Get bookmark list.


        Bookmarks are saved links that can be used to mark videos/frames of interest.

        They are scoped to a project and user, so if a user requests Bookmarks for
        a

        project they will only receive the Bookmarks created by them.

        '
      operationId: GetBookmarkList
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      - description: Name of the bookmark to filter on.
        in: query
        name: name
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Bookmark'
                type: array
          description: Successful retrieval of bookmark list.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    post:
      description: 'Create bookmark.


        Bookmarks are saved links that can be used to mark videos/frames of interest.

        They are scoped to a project and user, so if a user requests Bookmarks for
        a

        project they will only receive the Bookmarks created by them.

        '
      operationId: CreateBookmark
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      - description: Name of the bookmark to filter on.
        in: query
        name: name
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookmarkSpec'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
          description: Successful creation of bookmark.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/CloneMedia/{project}:
    post:
      description: "Clone media list.\n\nThis method copies media to a different project\
        \ without copying the \nunderlying files. It accepts the same query parameters\
        \ as a `Media` `GET`\nrequest. All media matching the query will be copied\
        \ to the project,\nmedia type, and section in the given request body. Section\
        \ is passed as\na section name; if the given section does not exist, it will\
        \ be created.\n\nThis endpoint will only clone up to 500 media per request.\
        \ Use the `start`,\n`stop`, or `after` parameters to paginate a request.\n"
      operationId: CloneMediaList
      parameters:
      - description: A unique integer identifying the source project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      - description: List of integers identifying media.
        explode: false
        in: query
        name: media_id
        required: false
        schema:
          items:
            minimum: 1
            type: integer
          type: array
      - description: Unique integer identifying media type.
        in: query
        name: type
        required: false
        schema:
          type: integer
      - description: Name of the media to filter on.
        in: query
        name: name
        required: false
        schema:
          type: string
      - description: Unique integer identifying a media section.
        in: query
        name: section
        required: false
        schema:
          type: integer
      - description: Data type of the files, either image or video.
        in: query
        name: dtype
        required: false
        schema:
          enum:
          - image
          - video
          type: string
      - description: MD5 sum of the media file.
        in: query
        name: md5
        required: false
        schema:
          type: string
      - description: Upload group ID of the media file.
        in: query
        name: gid
        required: false
        schema:
          type: string
      - description: Upload unique ID of the media file.
        in: query
        name: uid
        required: false
        schema:
          type: string
      - description: If given, all results returned will be after the file with this
          filename. The `start` and `stop` parameters are relative to this modified
          range.
        in: query
        name: after
        required: false
        schema:
          type: string
      - description: Lucene query syntax string for use with Elasticsearch. See `reference
          <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
        examples:
          basic:
            summary: Generic search
            value: '"My search string"'
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          no_search:
            summary: No filter
            value: '*'
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          wildcard:
            summary: Wildcard search
            value: Species:*hake
        in: query
        name: search
        required: false
        schema:
          type: string
      - description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute
        required: false
        schema:
          type: string
      - description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lt
        required: false
        schema:
          type: string
      - description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lte
        required: false
        schema:
          type: string
      - description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gt
        required: false
        schema:
          type: string
      - description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gte
        required: false
        schema:
          type: string
      - description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_contains
        required: false
        schema:
          type: string
      - description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        in: query
        name: attribute_distance
        required: false
        schema:
          type: string
      - description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        in: query
        name: attribute_null
        required: false
        schema:
          type: string
      - description: Set to "count" to return a count of objects instead of the objects.
        in: query
        name: operation
        required: false
        schema:
          enum:
          - count
          type: string
      - description: Pagination start index. Index of the first item in a larger list
          to return.
        in: query
        name: start
        required: false
        schema:
          type: integer
      - description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        in: query
        name: stop
        required: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            examples:
              section:
                summary: Clone to section
                value:
                  dest_project: 1
                  dest_section: My section
                  dest_type: 1
            schema:
              $ref: '#/components/schemas/CloneMediaSpec'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateListResponse'
          description: Successful creation of cloned media list.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/Favorite/{id}:
    delete:
      description: "Delete favorite.\n\nFavorites are saved annotation values to help\
        \ speed up annotation. They are \nscoped to a project and user, so if a user\
        \ requests Favorites for a project\nthey will only receive the Favorites created\
        \ by them.\n"
      operationId: DeleteFavorite
      parameters:
      - description: A unique integer identifying a favorite.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful deletion of favorite.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    get:
      description: "Get favorite.\n\nFavorites are saved annotation values to help\
        \ speed up annotation. They are \nscoped to a project and user, so if a user\
        \ requests Favorites for a project\nthey will only receive the Favorites created\
        \ by them.\n"
      operationId: GetFavorite
      parameters:
      - description: A unique integer identifying a favorite.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorite'
          description: Successful retrieval of favorite.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    patch:
      description: "Update favorite.\n\nFavorites are saved annotation values to help\
        \ speed up annotation. They are \nscoped to a project and user, so if a user\
        \ requests Favorites for a project\nthey will only receive the Favorites created\
        \ by them.\n"
      operationId: UpdateFavorite
      parameters:
      - description: A unique integer identifying a favorite.
        in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavoriteUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful update of favorite.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/Favorites/{project}:
    get:
      description: "Get favorite list.\n\nFavorites are saved annotation values to\
        \ help speed up annotation. They are \nscoped to a project and user, so if\
        \ a user requests Favorites for a project\nthey will only receive the Favorites\
        \ created by them.\n"
      operationId: GetFavoriteList
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Favorite'
                type: array
          description: Successful retrieval of favorite list.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    post:
      description: "Create favorite.\n\nFavorites are saved annotation values to help\
        \ speed up annotation. They are \nscoped to a project and user, so if a user\
        \ requests Favorites for a project\nthey will only receive the Favorites created\
        \ by them.\n"
      operationId: CreateFavorite
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavoriteSpec'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
          description: Successful creation of favorite.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/GetClip/{id}:
    get:
      description: 'Get video clip.


        Facility to get a clip from the server. Returns a temporary file object that
        expires in 24 hours.

        '
      operationId: GetClip
      parameters:
      - description: A unique integer identifying a media object.
        in: path
        name: id
        required: true
        schema:
          type: integer
      - description: Comma-seperated list of frame ranges to capture.
        example:
        - 0:30
        - 50:90
        explode: false
        in: query
        name: frameRanges
        required: true
        schema:
          items:
            type: string
          type: array
      - description: Source resolution to use (default to highest quality)
        in: query
        name: quality
        required: false
        schema:
          minimum: 0
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoClip'
          description: Successful retrieval of video clip.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/GetFrame/{id}:
    get:
      description: 'Get frame(s) from a video.


        Facility to get a frame(jpg/png) of a given video frame, returns a square
        tile of

        frames based on the input parameter.

        '
      operationId: GetFrame
      parameters:
      - description: A unique integer identifying a media object.
        in: path
        name: id
        required: true
        schema:
          type: integer
      - description: Comma-seperated list of frames to capture.
        example:
        - 0
        - 100
        - 200
        explode: false
        in: query
        name: frames
        required: false
        schema:
          default:
          - 0
          items:
            minimum: 0
            type: integer
          maxLength: 32
          type: array
      - description: wxh, if not supplied is made as squarish as possible.
        in: query
        name: tile
        required: false
        schema:
          type: string
      - description: w:h:x:y, optionally crop each frame to a given roi in relative
          coordinates.
        in: query
        name: roi
        required: false
        schema:
          type: string
      - description: If not tiling, animate each frame at a given fps in a gif.
        in: query
        name: animate
        required: false
        schema:
          maximum: 15
          minimum: 0
          type: integer
      - description: Source resolution to use (default to highest quality)
        in: query
        name: quality
        required: false
        schema:
          minimum: 0
          type: integer
      responses:
        '200':
          content:
            image/*:
              schema:
                format: binary
                type: string
          description: Successful retrieval of frame image.
        '400':
          content:
            image/*:
              schema:
                format: binary
                type: string
          description: Bad request.
        '404':
          content:
            image/*:
              schema:
                format: binary
                type: string
          description: Not found.
      tags:
      - Tator
  /rest/Job/{uid}:
    delete:
      description: 'Delete background job.


        Algorithms and transcodes create argo workflows that are annotated with two

        uuid1 strings, one identifying the run and the other identifying the group.

        Jobs that are submitted together have the same group id, but each workflow

        has a unique run id.



        This method allows the user to cancel a job using the `uid` returned

        by either the `AlgorithmLaunch` or `Transcode` endpoints.

        '
      operationId: DeleteJob
      parameters:
      - description: A uuid1 string identifying to single Job.
        in: path
        name: uid
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful deletion of job.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    get:
      description: 'Get background job.


        Algorithms and transcodes create argo workflows that are annotated with two

        uuid1 strings, one identifying the run and the other identifying the group.

        Jobs that are submitted together have the same group id, but each workflow

        has a unique run id.



        This method allows the user to get a job''s status using the `uid` returned

        by either the `AlgorithmLaunch` or `Transcode` endpoints.

        '
      operationId: GetJob
      parameters:
      - description: A uuid1 string identifying to single Job.
        in: path
        name: uid
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: Successful retrieval of job.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/Jobs/{project}:
    delete:
      description: 'Delete background job list.


        Algorithms and transcodes create argo workflows that are annotated with two

        uuid1 strings, one identifying the run and the other identifying the group.

        Jobs that are submitted together have the same group id, but each workflow

        has a unique run id.



        This method allows the user to batch delete a list of jobs that were created

        by either the `AlgorithmLaunch` or `Transcode` endpoints.

        '
      operationId: DeleteJobList
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      - description: A UUID string identifying a group of jobs.
        in: query
        name: gid
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful deletion of job list.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    get:
      description: 'Get background job list.


        Algorithms and transcodes create argo workflows that are annotated with two

        uuid1 strings, one identifying the run and the other identifying the group.

        Jobs that are submitted together have the same group id, but each workflow

        has a unique run id.



        This method allows the user to status for a list of jobs in a project

        that were created by either the `AlgorithmLaunch` or `Transcode` endpoints.

        '
      operationId: GetJobList
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      - description: A UUID string identifying a group of jobs.
        in: query
        name: gid
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Job'
                type: array
          description: Successful retrieval of job list.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/Leaf/{id}:
    delete:
      description: 'Delete leaf.


        Leaves are used to define label hierarchies that can be used for autocompletion

        of string attribute types. Leaves are a type of entity in Tator, meaning they

        can be described by user-defined attributes.

        '
      operationId: DeleteLeaf
      parameters:
      - description: A unique integer identifying a leaf.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful deletion of leaf.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    get:
      description: 'Get leaf.


        Leaves are used to define label hierarchies that can be used for autocompletion

        of string attribute types. Leaves are a type of entity in Tator, meaning they

        can be described by user-defined attributes.

        '
      operationId: GetLeaf
      parameters:
      - description: A unique integer identifying a leaf.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Leaf'
          description: Successful retrieval of leaf.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    patch:
      description: 'Update leaf.


        Leaves are used to define label hierarchies that can be used for autocompletion

        of string attribute types. Leaves are a type of entity in Tator, meaning they

        can be described by user-defined attributes.

        '
      operationId: UpdateLeaf
      parameters:
      - description: A unique integer identifying a leaf.
        in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeafUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful update of leaf.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/LeafCount/{project}:
    get:
      description: 'Retrieve count of leaves in a leaf list.


        This endpoint accepts the same query parameters as a GET request to the `Leaves`
        endpoint,

        but only returns the number of leaves.

        '
      operationId: GetLeafCount
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      - description: Get descendents of a leaf element (inclusive), by path (i.e.
          ITIS.Animalia).
        in: query
        name: ancestor
        required: false
        schema:
          type: string
      - description: Unique integer identifying a leaf type.
        in: query
        name: type
        required: false
        schema:
          type: integer
      - description: Name of the leaf element.
        in: query
        name: name
        required: false
        schema:
          type: string
      - description: Get a specific tree depth. Root node depth is 0.
        in: query
        name: depth
        required: false
        schema:
          type: integer
      - description: Comma-separated list of leaf IDs.
        in: query
        name: leaf_id
        required: false
        schema:
          items:
            nullable: false
            type: integer
          nullable: false
          type: array
      - description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute
        required: false
        schema:
          type: string
      - description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lt
        required: false
        schema:
          type: string
      - description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lte
        required: false
        schema:
          type: string
      - description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gt
        required: false
        schema:
          type: string
      - description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gte
        required: false
        schema:
          type: string
      - description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_contains
        required: false
        schema:
          type: string
      - description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        in: query
        name: attribute_distance
        required: false
        schema:
          type: string
      - description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        in: query
        name: attribute_null
        required: false
        schema:
          type: string
      - description: Set to "count" to return a count of objects instead of the objects.
        in: query
        name: operation
        required: false
        schema:
          enum:
          - count
          type: string
      - description: Pagination start index. Index of the first item in a larger list
          to return.
        in: query
        name: start
        required: false
        schema:
          type: integer
      - description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        in: query
        name: stop
        required: false
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                minimum: 0
                type: integer
          description: Number of leaves in the list corresponding to query.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/LeafType/{id}:
    delete:
      description: 'Delete leaf type.


        A leaf type is the metadata definition object for a leaf. It includes

        name, description, and may have any number of user-defined attribute

        types associated with it.

        '
      operationId: DeleteLeafType
      parameters:
      - description: A unique integer identifying an leaf type.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful deletion of leaf type.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    get:
      description: 'Get leaf type.


        A leaf type is the metadata definition object for a leaf. It includes

        name, description, and may have any number of user-defined attribute

        types associated with it.

        '
      operationId: GetLeafType
      parameters:
      - description: A unique integer identifying an leaf type.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeafType'
          description: Successful retrieval of leaf type.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    patch:
      description: 'Update leaf type.


        A leaf type is the metadata definition object for a leaf. It includes

        name, description, and may have any number of user-defined attribute

        types associated with it.

        '
      operationId: UpdateLeafType
      parameters:
      - description: A unique integer identifying an leaf type.
        in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            example:
              description: New description
              name: New name
            schema:
              $ref: '#/components/schemas/LeafTypeUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful update of leaf type.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/LeafTypes/{project}:
    get:
      description: 'Get leaf type list.


        A leaf type is the metadata definition object for a leaf. It includes

        name, description, and may have any number of user-defined attribute

        types associated with it.

        '
      operationId: GetLeafTypeList
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LeafType'
                type: array
          description: Successful retrieval of leaf type list.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    post:
      description: 'Create leaf type.


        A leaf type is the metadata definition object for a leaf. It includes

        name, description, and may have any number of user-defined attribute

        types associated with it.

        '
      operationId: CreateLeafType
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            example:
              attribute_types:
              - default: false
                dtype: bool
                name: My Boolean
              - default: 0
                dtype: int
                maximum: 1
                minimum: -1
                name: My Integer
              - default: 0.0
                dtype: float
                maximum: 1.0
                minimum: -1.0
                name: My Float
              - choices:
                - a
                - b
                - c
                default: a
                dtype: enum
                labels:
                - a
                - b
                - c
                name: My Enumeration
              - autocomplete:
                  serviceUrl: https://www.example.com/suggestion
                default: '---'
                dtype: string
                name: My String
              - default: '---'
                dtype: string
                name: My String (Text Area)
                style: long_string
              - dtype: datetime
                name: My Datetime
                use_current: true
              - default:
                - -179.0
                - 90.0
                dtype: geopos
                name: My Geoposition
              name: My leaf type
            schema:
              $ref: '#/components/schemas/LeafTypeSpec'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
          description: Successful creation of leaf type.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/Leaves/Suggestion/{ancestor}/{project}:
    get:
      description: 'Get list of autocomplete suggestions.


        This endpoint is compatible with devbridge suggestion format. It performs

        a glob search on leaf objects in the project.


        <https://github.com/kraaden/autocomplete>

        '
      operationId: LeafSuggestion
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      - description: Get descendents of a leaf element (inclusive), by path (i.e.
          ITIS.Animalia).
        in: path
        name: ancestor
        required: true
        schema:
          type: string
      - description: Integer specifying level of results that may be returned. For
          example, 2 refers to grandchildren of the level specified by the `ancestor`
          parameter.
        in: query
        name: minLevel
        required: false
        schema:
          type: integer
      - description: String to search for matching names.
        in: query
        name: query
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LeafSuggestion'
                type: array
          description: Successful retrieval of suggestions.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/Leaves/{project}:
    delete:
      description: "Delete leaf list.\n\nLeaves are used to define label hierarchies\
        \ that can be used for autocompletion\nof string attribute types. Leaves are\
        \ a type of entity in Tator, meaning they\ncan be described by user-defined\
        \ attributes.\n\n\nThis method performs a bulk delete on all leaves matching\
        \ a query. It is \nrecommended to use a GET request first to check what is\
        \ being deleted.\n"
      operationId: DeleteLeafList
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      - description: Get descendents of a leaf element (inclusive), by path (i.e.
          ITIS.Animalia).
        in: query
        name: ancestor
        required: false
        schema:
          type: string
      - description: Unique integer identifying a leaf type.
        in: query
        name: type
        required: false
        schema:
          type: integer
      - description: Name of the leaf element.
        in: query
        name: name
        required: false
        schema:
          type: string
      - description: Get a specific tree depth. Root node depth is 0.
        in: query
        name: depth
        required: false
        schema:
          type: integer
      - description: Comma-separated list of leaf IDs.
        in: query
        name: leaf_id
        required: false
        schema:
          items:
            nullable: false
            type: integer
          nullable: false
          type: array
      - description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute
        required: false
        schema:
          type: string
      - description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lt
        required: false
        schema:
          type: string
      - description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lte
        required: false
        schema:
          type: string
      - description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gt
        required: false
        schema:
          type: string
      - description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gte
        required: false
        schema:
          type: string
      - description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_contains
        required: false
        schema:
          type: string
      - description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        in: query
        name: attribute_distance
        required: false
        schema:
          type: string
      - description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        in: query
        name: attribute_null
        required: false
        schema:
          type: string
      - description: Set to "count" to return a count of objects instead of the objects.
        in: query
        name: operation
        required: false
        schema:
          enum:
          - count
          type: string
      - description: Pagination start index. Index of the first item in a larger list
          to return.
        in: query
        name: start
        required: false
        schema:
          type: integer
      - description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        in: query
        name: stop
        required: false
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful deletion of leaf list.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    get:
      description: 'Get leaf list.


        Leaves are used to define label hierarchies that can be used for autocompletion

        of string attribute types. Leaves are a type of entity in Tator, meaning they

        can be described by user-defined attributes.



        '
      operationId: GetLeafList
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      - description: Get descendents of a leaf element (inclusive), by path (i.e.
          ITIS.Animalia).
        in: query
        name: ancestor
        required: false
        schema:
          type: string
      - description: Unique integer identifying a leaf type.
        in: query
        name: type
        required: false
        schema:
          type: integer
      - description: Name of the leaf element.
        in: query
        name: name
        required: false
        schema:
          type: string
      - description: Get a specific tree depth. Root node depth is 0.
        in: query
        name: depth
        required: false
        schema:
          type: integer
      - description: Comma-separated list of leaf IDs.
        in: query
        name: leaf_id
        required: false
        schema:
          items:
            nullable: false
            type: integer
          nullable: false
          type: array
      - description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute
        required: false
        schema:
          type: string
      - description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lt
        required: false
        schema:
          type: string
      - description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lte
        required: false
        schema:
          type: string
      - description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gt
        required: false
        schema:
          type: string
      - description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gte
        required: false
        schema:
          type: string
      - description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_contains
        required: false
        schema:
          type: string
      - description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        in: query
        name: attribute_distance
        required: false
        schema:
          type: string
      - description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        in: query
        name: attribute_null
        required: false
        schema:
          type: string
      - description: Set to "count" to return a count of objects instead of the objects.
        in: query
        name: operation
        required: false
        schema:
          enum:
          - count
          type: string
      - description: Pagination start index. Index of the first item in a larger list
          to return.
        in: query
        name: start
        required: false
        schema:
          type: integer
      - description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        in: query
        name: stop
        required: false
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Leaf'
                type: array
          description: Successful retrieval of leaf list.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    patch:
      description: "Update leaf list.\n\nLeaves are used to define label hierarchies\
        \ that can be used for autocompletion\nof string attribute types. Leaves are\
        \ a type of entity in Tator, meaning they\ncan be described by user-defined\
        \ attributes.\n\n\nThis method does a bulk update on all leaves matching a\
        \ query. Only \nuser-defined attributes may be bulk updated.\n"
      operationId: UpdateLeafList
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      - description: Get descendents of a leaf element (inclusive), by path (i.e.
          ITIS.Animalia).
        in: query
        name: ancestor
        required: false
        schema:
          type: string
      - description: Unique integer identifying a leaf type.
        in: query
        name: type
        required: false
        schema:
          type: integer
      - description: Name of the leaf element.
        in: query
        name: name
        required: false
        schema:
          type: string
      - description: Get a specific tree depth. Root node depth is 0.
        in: query
        name: depth
        required: false
        schema:
          type: integer
      - description: Comma-separated list of leaf IDs.
        in: query
        name: leaf_id
        required: false
        schema:
          items:
            nullable: false
            type: integer
          nullable: false
          type: array
      - description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute
        required: false
        schema:
          type: string
      - description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lt
        required: false
        schema:
          type: string
      - description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lte
        required: false
        schema:
          type: string
      - description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gt
        required: false
        schema:
          type: string
      - description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gte
        required: false
        schema:
          type: string
      - description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_contains
        required: false
        schema:
          type: string
      - description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        in: query
        name: attribute_distance
        required: false
        schema:
          type: string
      - description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        in: query
        name: attribute_null
        required: false
        schema:
          type: string
      - description: Set to "count" to return a count of objects instead of the objects.
        in: query
        name: operation
        required: false
        schema:
          enum:
          - count
          type: string
      - description: Pagination start index. Index of the first item in a larger list
          to return.
        in: query
        name: start
        required: false
        schema:
          type: integer
      - description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        in: query
        name: stop
        required: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeBulkUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful update of leaf list.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    post:
      description: "Create leaf list.\n\nLeaves are used to define label hierarchies\
        \ that can be used for autocompletion\nof string attribute types. Leaves are\
        \ a type of entity in Tator, meaning they\ncan be described by user-defined\
        \ attributes.\n\n\nThis method does a bulk create on a list of `LeafSpec`\
        \ objects. A \nmaximum of 500 leaves may be created in one request.\n"
      operationId: CreateLeafList
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/LeafSpec'
              maxItems: 500
              type: array
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateListResponse'
          description: Successful creation of leaf.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/Localization/{id}:
    delete:
      description: "Delete localization.\n\nLocalizations are shape annotations drawn\
        \ on a video or image. Available shapes (`dtype`) are \nbox, line, or dot.\
        \ Each shape is parameterized by a different subset of data members:\n- `box`\
        \ uses `x`, `y`, `width`, `height`.\n- `line` uses `x`, `y`, `u`, `v`.\n-\
        \ `dot` uses `x` and `y`.\n\nGeometry members may be left null when creating\
        \ a localization, in which case the shapes may be \ndrawn later using the\
        \ redraw capability in the web UI. Localizations are a type of entity in Tator,\n\
        meaning they can be described by user defined attributes.\n"
      operationId: DeleteLocalization
      parameters:
      - description: A unique integer identifying a localization.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful deletion of localization.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    get:
      description: "Get localization.\n\nLocalizations are shape annotations drawn\
        \ on a video or image. Available shapes (`dtype`) are \nbox, line, or dot.\
        \ Each shape is parameterized by a different subset of data members:\n- `box`\
        \ uses `x`, `y`, `width`, `height`.\n- `line` uses `x`, `y`, `u`, `v`.\n-\
        \ `dot` uses `x` and `y`.\n\nGeometry members may be left null when creating\
        \ a localization, in which case the shapes may be \ndrawn later using the\
        \ redraw capability in the web UI. Localizations are a type of entity in Tator,\n\
        meaning they can be described by user defined attributes.\n"
      operationId: GetLocalization
      parameters:
      - description: A unique integer identifying a localization.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Localization'
          description: Successful retrieval of localization.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    patch:
      description: "Update localization.\n\nLocalizations are shape annotations drawn\
        \ on a video or image. Available shapes (`dtype`) are \nbox, line, or dot.\
        \ Each shape is parameterized by a different subset of data members:\n- `box`\
        \ uses `x`, `y`, `width`, `height`.\n- `line` uses `x`, `y`, `u`, `v`.\n-\
        \ `dot` uses `x` and `y`.\n\nGeometry members may be left null when creating\
        \ a localization, in which case the shapes may be \ndrawn later using the\
        \ redraw capability in the web UI. Localizations are a type of entity in Tator,\n\
        meaning they can be described by user defined attributes.\n"
      operationId: UpdateLocalization
      parameters:
      - description: A unique integer identifying a localization.
        in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            example:
              height: 0.25
              width: 0.25
              x: 0.25
              y: 0.25
            schema:
              $ref: '#/components/schemas/LocalizationUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful update of localization.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/LocalizationCount/{project}:
    get:
      description: 'Retrieve count of localizations in a localization list.


        This endpoint accepts the same query parameters as a GET request to the `Localizations`
        endpoint,

        but only returns the number of localizations.

        '
      operationId: GetLocalizationCount
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      - description: Query string used to filter media IDs. If supplied, media_id
          will be ignored.
        in: query
        name: media_query
        required: false
        schema:
          type: string
      - description: Comma-separated list of media IDs.
        explode: false
        in: query
        name: media_id
        required: false
        schema:
          items:
            type: integer
          type: array
      - description: Unique integer identifying a annotation type.
        in: query
        name: type
        required: false
        schema:
          type: integer
      - description: List of integers representing versions to fetch
        explode: false
        in: query
        name: version
        required: false
        schema:
          items:
            type: integer
          type: array
      - description: If given, all results returned will be after the localization
          with this ID. The `start` and `stop` parameters are relative to this modified
          range.
        in: query
        name: after
        required: false
        schema:
          type: integer
      - description: Lucene query syntax string for use with Elasticsearch. See `reference
          <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
        examples:
          basic:
            summary: Generic search
            value: '"My search string"'
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          no_search:
            summary: No filter
            value: '*'
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          wildcard:
            summary: Wildcard search
            value: Species:*hake
        in: query
        name: search
        required: false
        schema:
          type: string
      - description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute
        required: false
        schema:
          type: string
      - description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lt
        required: false
        schema:
          type: string
      - description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lte
        required: false
        schema:
          type: string
      - description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gt
        required: false
        schema:
          type: string
      - description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gte
        required: false
        schema:
          type: string
      - description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_contains
        required: false
        schema:
          type: string
      - description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        in: query
        name: attribute_distance
        required: false
        schema:
          type: string
      - description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        in: query
        name: attribute_null
        required: false
        schema:
          type: string
      - description: Set to "count" to return a count of objects instead of the objects.
        in: query
        name: operation
        required: false
        schema:
          enum:
          - count
          type: string
      - description: Pagination start index. Index of the first item in a larger list
          to return.
        in: query
        name: start
        required: false
        schema:
          type: integer
      - description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        in: query
        name: stop
        required: false
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                minimum: 0
                type: integer
          description: Number of localizations in the list corresponding to query.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/LocalizationGraphic/{id}:
    get:
      description: 'Get localization graphic from a media object.

        '
      operationId: GetLocalizationGraphic
      parameters:
      - description: A unique integer identifying a localization.
        in: path
        name: id
        required: true
        schema:
          type: integer
      - description: 'Size of final image to return. This forces scaling the image.
          Default is the localization size and margins define the image size. Example:
          100x100 '
        in: query
        name: force_scale
        required: false
        schema:
          type: string
      - description: 'Use default margins for localization types.  Default margins
          (x,y pixels) - dot: (10,10) line:  (10,10) box: (0,0) '
        in: query
        name: use_default_margins
        required: false
        schema:
          default: true
          type: boolean
      - description: 'Pixel margin to apply to the height of the localization when
          generating the image. Valid only if use_default_margins is false. '
        in: query
        name: margin_x
        required: false
        schema:
          type: integer
      - description: 'Pixel margin to apply to the width of the localization when
          generating the image. Valid only if use_default_margins is false. '
        in: query
        name: margin_y
        required: false
        schema:
          type: integer
      responses:
        '200':
          content:
            image/*:
              schema:
                format: binary
                type: string
          description: Successful retrieval of localization graphic.
        '400':
          content:
            image/*:
              schema:
                format: binary
                type: string
          description: Bad request.
        '404':
          content:
            image/*:
              schema:
                format: binary
                type: string
          description: Not found.
      tags:
      - Tator
  /rest/LocalizationType/{id}:
    delete:
      description: 'Delete localization type.


        A localization type is the metadata definition object for a localization.
        It includes

        shape, name, description, and may have any number of user-defined attribute

        types associated with it.



        Note that this will also delete any localizations associated with

        the localization type.

        '
      operationId: DeleteLocalizationType
      parameters:
      - description: A unique integer identifying an localization type.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful deletion of localization type.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    get:
      description: 'Get localization type.


        A localization type is the metadata definition object for a localization.
        It includes

        shape, name, description, and may have any number of user-defined attribute

        types associated with it.



        '
      operationId: GetLocalizationType
      parameters:
      - description: A unique integer identifying an localization type.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalizationType'
          description: Successful retrieval of localization type.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    patch:
      description: 'Update localization type.


        A localization type is the metadata definition object for a localization.
        It includes

        shape, name, description, and may have any number of user-defined attribute

        types associated with it.



        '
      operationId: UpdateLocalizationType
      parameters:
      - description: A unique integer identifying an localization type.
        in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            example:
              description: New description
              name: New name
            schema:
              $ref: '#/components/schemas/LocalizationTypeUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful update of localization type.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/LocalizationTypes/{project}:
    get:
      description: 'Get localization type list.


        A localization type is the metadata definition object for a localization.
        It includes

        shape, name, description, and may have any number of user-defined attribute

        types associated with it.

        '
      operationId: GetLocalizationTypeList
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      - description: List of unique integers identifying a media.
        explode: false
        in: query
        name: media_id
        required: false
        schema:
          items:
            type: integer
          type: array
      - description: Deprecated. Use `LocalizationType` endpoint to retrieve individual
          localization type by ID.
        in: query
        name: type
        required: false
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LocalizationType'
                type: array
          description: Successful retrieval of localization type list.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    post:
      description: 'Create localization type.


        A localization type is the metadata definition object for a localization.
        It includes

        shape, name, description, and may have any number of user-defined attribute

        types associated with it.

        '
      operationId: CreateLocalizationType
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            example:
              attribute_types:
              - default: false
                dtype: bool
                name: My Boolean
              - default: 0
                dtype: int
                maximum: 1
                minimum: -1
                name: My Integer
              - default: 0.0
                dtype: float
                maximum: 1.0
                minimum: -1.0
                name: My Float
              - choices:
                - a
                - b
                - c
                default: a
                dtype: enum
                labels:
                - a
                - b
                - c
                name: My Enumeration
              - autocomplete:
                  serviceUrl: https://www.example.com/suggestion
                default: '---'
                dtype: string
                name: My String
              - default: '---'
                dtype: string
                name: My String (Text Area)
                style: long_string
              - dtype: datetime
                name: My Datetime
                use_current: true
              - default:
                - -179.0
                - 90.0
                dtype: geopos
                name: My Geoposition
              dtype: box
              media_types:
              - 1
              name: My localization type
            schema:
              $ref: '#/components/schemas/LocalizationTypeSpec'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
          description: Successful creation of localization type.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/Localizations/{project}:
    delete:
      description: "Delete localiazation list.\n\nLocalizations are shape annotations\
        \ drawn on a video or image. Available shapes (`dtype`) are \nbox, line, or\
        \ dot. Each shape is parameterized by a different subset of data members:\n\
        - `box` uses `x`, `y`, `width`, `height`.\n- `line` uses `x`, `y`, `u`, `v`.\n\
        - `dot` uses `x` and `y`.\n\nGeometry members may be left null when creating\
        \ a localization, in which case the shapes may be \ndrawn later using the\
        \ redraw capability in the web UI. Localizations are a type of entity in Tator,\n\
        meaning they can be described by user defined attributes.\n\n\nThis method\
        \ performs a bulk delete on all localizations matching a query. It is \nrecommended\
        \ to use a GET request first to check what is being deleted.\n"
      operationId: DeleteLocalizationList
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      - description: Query string used to filter media IDs. If supplied, media_id
          will be ignored.
        in: query
        name: media_query
        required: false
        schema:
          type: string
      - description: Comma-separated list of media IDs.
        explode: false
        in: query
        name: media_id
        required: false
        schema:
          items:
            type: integer
          type: array
      - description: Unique integer identifying a annotation type.
        in: query
        name: type
        required: false
        schema:
          type: integer
      - description: List of integers representing versions to fetch
        explode: false
        in: query
        name: version
        required: false
        schema:
          items:
            type: integer
          type: array
      - description: If given, all results returned will be after the localization
          with this ID. The `start` and `stop` parameters are relative to this modified
          range.
        in: query
        name: after
        required: false
        schema:
          type: integer
      - description: Lucene query syntax string for use with Elasticsearch. See `reference
          <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
        examples:
          basic:
            summary: Generic search
            value: '"My search string"'
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          no_search:
            summary: No filter
            value: '*'
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          wildcard:
            summary: Wildcard search
            value: Species:*hake
        in: query
        name: search
        required: false
        schema:
          type: string
      - description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute
        required: false
        schema:
          type: string
      - description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lt
        required: false
        schema:
          type: string
      - description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lte
        required: false
        schema:
          type: string
      - description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gt
        required: false
        schema:
          type: string
      - description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gte
        required: false
        schema:
          type: string
      - description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_contains
        required: false
        schema:
          type: string
      - description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        in: query
        name: attribute_distance
        required: false
        schema:
          type: string
      - description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        in: query
        name: attribute_null
        required: false
        schema:
          type: string
      - description: Set to "count" to return a count of objects instead of the objects.
        in: query
        name: operation
        required: false
        schema:
          enum:
          - count
          type: string
      - description: Pagination start index. Index of the first item in a larger list
          to return.
        in: query
        name: start
        required: false
        schema:
          type: integer
      - description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        in: query
        name: stop
        required: false
        schema:
          type: integer
      - description: If a clone is present, do not send parent. (0 or 1)
        in: query
        name: excludeParents
        required: false
        schema:
          default: 0
          maximum: 1
          minimum: 0
          nullable: false
          type: integer
      - description: Frame number of this localization if it is in a video.
        in: query
        name: frame
        required: false
        schema:
          minimum: 0
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful deletion of localization list.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    get:
      description: "Get localization list.\n\nLocalizations are shape annotations\
        \ drawn on a video or image. Available shapes (`dtype`) are \nbox, line, or\
        \ dot. Each shape is parameterized by a different subset of data members:\n\
        - `box` uses `x`, `y`, `width`, `height`.\n- `line` uses `x`, `y`, `u`, `v`.\n\
        - `dot` uses `x` and `y`.\n\nGeometry members may be left null when creating\
        \ a localization, in which case the shapes may be \ndrawn later using the\
        \ redraw capability in the web UI. Localizations are a type of entity in Tator,\n\
        meaning they can be described by user defined attributes.\n\n\n"
      operationId: GetLocalizationList
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      - description: Query string used to filter media IDs. If supplied, media_id
          will be ignored.
        in: query
        name: media_query
        required: false
        schema:
          type: string
      - description: Comma-separated list of media IDs.
        explode: false
        in: query
        name: media_id
        required: false
        schema:
          items:
            type: integer
          type: array
      - description: Unique integer identifying a annotation type.
        in: query
        name: type
        required: false
        schema:
          type: integer
      - description: List of integers representing versions to fetch
        explode: false
        in: query
        name: version
        required: false
        schema:
          items:
            type: integer
          type: array
      - description: If given, all results returned will be after the localization
          with this ID. The `start` and `stop` parameters are relative to this modified
          range.
        in: query
        name: after
        required: false
        schema:
          type: integer
      - description: Lucene query syntax string for use with Elasticsearch. See `reference
          <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
        examples:
          basic:
            summary: Generic search
            value: '"My search string"'
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          no_search:
            summary: No filter
            value: '*'
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          wildcard:
            summary: Wildcard search
            value: Species:*hake
        in: query
        name: search
        required: false
        schema:
          type: string
      - description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute
        required: false
        schema:
          type: string
      - description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lt
        required: false
        schema:
          type: string
      - description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lte
        required: false
        schema:
          type: string
      - description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gt
        required: false
        schema:
          type: string
      - description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gte
        required: false
        schema:
          type: string
      - description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_contains
        required: false
        schema:
          type: string
      - description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        in: query
        name: attribute_distance
        required: false
        schema:
          type: string
      - description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        in: query
        name: attribute_null
        required: false
        schema:
          type: string
      - description: Set to "count" to return a count of objects instead of the objects.
        in: query
        name: operation
        required: false
        schema:
          enum:
          - count
          type: string
      - description: Pagination start index. Index of the first item in a larger list
          to return.
        in: query
        name: start
        required: false
        schema:
          type: integer
      - description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        in: query
        name: stop
        required: false
        schema:
          type: integer
      - description: If a clone is present, do not send parent. (0 or 1)
        in: query
        name: excludeParents
        required: false
        schema:
          default: 0
          maximum: 1
          minimum: 0
          nullable: false
          type: integer
      - description: Frame number of this localization if it is in a video.
        in: query
        name: frame
        required: false
        schema:
          minimum: 0
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Localization'
                type: array
          description: Successful retrieval of localization list.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    patch:
      description: "Update localiazation list.\n\nLocalizations are shape annotations\
        \ drawn on a video or image. Available shapes (`dtype`) are \nbox, line, or\
        \ dot. Each shape is parameterized by a different subset of data members:\n\
        - `box` uses `x`, `y`, `width`, `height`.\n- `line` uses `x`, `y`, `u`, `v`.\n\
        - `dot` uses `x` and `y`.\n\nGeometry members may be left null when creating\
        \ a localization, in which case the shapes may be \ndrawn later using the\
        \ redraw capability in the web UI. Localizations are a type of entity in Tator,\n\
        meaning they can be described by user defined attributes.\n\n\nThis method\
        \ does a bulk update on all localizations matching a query. Only \nuser-defined\
        \ attributes may be bulk updated.\n"
      operationId: UpdateLocalizationList
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      - description: Query string used to filter media IDs. If supplied, media_id
          will be ignored.
        in: query
        name: media_query
        required: false
        schema:
          type: string
      - description: Comma-separated list of media IDs.
        explode: false
        in: query
        name: media_id
        required: false
        schema:
          items:
            type: integer
          type: array
      - description: Unique integer identifying a annotation type.
        in: query
        name: type
        required: false
        schema:
          type: integer
      - description: List of integers representing versions to fetch
        explode: false
        in: query
        name: version
        required: false
        schema:
          items:
            type: integer
          type: array
      - description: If given, all results returned will be after the localization
          with this ID. The `start` and `stop` parameters are relative to this modified
          range.
        in: query
        name: after
        required: false
        schema:
          type: integer
      - description: Lucene query syntax string for use with Elasticsearch. See `reference
          <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
        examples:
          basic:
            summary: Generic search
            value: '"My search string"'
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          no_search:
            summary: No filter
            value: '*'
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          wildcard:
            summary: Wildcard search
            value: Species:*hake
        in: query
        name: search
        required: false
        schema:
          type: string
      - description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute
        required: false
        schema:
          type: string
      - description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lt
        required: false
        schema:
          type: string
      - description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lte
        required: false
        schema:
          type: string
      - description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gt
        required: false
        schema:
          type: string
      - description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gte
        required: false
        schema:
          type: string
      - description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_contains
        required: false
        schema:
          type: string
      - description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        in: query
        name: attribute_distance
        required: false
        schema:
          type: string
      - description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        in: query
        name: attribute_null
        required: false
        schema:
          type: string
      - description: Set to "count" to return a count of objects instead of the objects.
        in: query
        name: operation
        required: false
        schema:
          enum:
          - count
          type: string
      - description: Pagination start index. Index of the first item in a larger list
          to return.
        in: query
        name: start
        required: false
        schema:
          type: integer
      - description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        in: query
        name: stop
        required: false
        schema:
          type: integer
      - description: If a clone is present, do not send parent. (0 or 1)
        in: query
        name: excludeParents
        required: false
        schema:
          default: 0
          maximum: 1
          minimum: 0
          nullable: false
          type: integer
      - description: Frame number of this localization if it is in a video.
        in: query
        name: frame
        required: false
        schema:
          minimum: 0
          type: integer
      requestBody:
        content:
          application/json:
            examples:
              single:
                summary: Update Species attribute of many localizations
                value:
                  attributes:
                    Species: Tuna
            schema:
              $ref: '#/components/schemas/AttributeBulkUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful update of localization list.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    post:
      description: "Create localiazation list.\n\nLocalizations are shape annotations\
        \ drawn on a video or image. Available shapes (`dtype`) are \nbox, line, or\
        \ dot. Each shape is parameterized by a different subset of data members:\n\
        - `box` uses `x`, `y`, `width`, `height`.\n- `line` uses `x`, `y`, `u`, `v`.\n\
        - `dot` uses `x` and `y`.\n\nGeometry members may be left null when creating\
        \ a localization, in which case the shapes may be \ndrawn later using the\
        \ redraw capability in the web UI. Localizations are a type of entity in Tator,\n\
        meaning they can be described by user defined attributes.\n\n\nThis method\
        \ does a bulk create on a list of `LocalizationSpec` objects. A \nmaximum\
        \ of 500 localizations may be created in one request.\n"
      operationId: CreateLocalizationList
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            examples:
              box:
                summary: Single box localization
                value:
                - My First Attribute: value1
                  My Second Attribute: value2
                  frame: 1000
                  height: 0.4
                  media_id: 1
                  type: 1
                  width: 0.3
                  x: 0.1
                  y: 0.2
              boxes:
                summary: Many box localizations
                value:
                - My First Attribute: value1
                  My Second Attribute: value2
                  frame: 100
                  height: 0.4
                  media_id: 1
                  type: 1
                  width: 0.3
                  x: 0.1
                  y: 0.2
                - My First Attribute: value1
                  My Second Attribute: value2
                  frame: 1000
                  height: 0.4
                  media_id: 1
                  type: 1
                  width: 0.3
                  x: 0.1
                  y: 0.2
              dot:
                summary: Single dot localization
                value:
                - My First Attribute: value1
                  My Second Attribute: value2
                  frame: 1000
                  media_id: 1
                  type: 1
                  x: 0.1
                  y: 0.2
              dots:
                summary: Many dot localizations
                value:
                - My First Attribute: value1
                  My Second Attribute: value2
                  frame: 100
                  media_id: 1
                  type: 1
                  x: 0.1
                  y: 0.2
                - My First Attribute: value1
                  My Second Attribute: value2
                  frame: 1000
                  x: 0.1
                  y: 0.2
              line:
                summary: Single line localization
                value:
                - My First Attribute: value1
                  My Second Attribute: value2
                  frame: 1000
                  media_id: 1
                  type: 2
                  u: 0.3
                  v: 0.4
                  x: 0.1
                  y: 0.2
              lines:
                summary: Many line localizations
                value:
                - My First Attribute: value1
                  My Second Attribute: value2
                  frame: 100
                  media_id: 1
                  type: 2
                  u: 0.3
                  v: 0.4
                  x: 0.1
                  y: 0.2
                - My First Attribute: value1
                  My Second Attribute: value2
                  frame: 1000
                  u: 0.3
                  v: 0.4
                  x: 0.1
                  y: 0.2
            schema:
              items:
                $ref: '#/components/schemas/LocalizationSpec'
              maxItems: 500
              type: array
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateListResponse'
          description: Successful creation of localization(s).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/Media/{id}:
    delete:
      description: 'Delete media.


        A media may be an image or a video. Media are a type of entity in Tator,

        meaning they can be described by user defined attributes.



        '
      operationId: DeleteMedia
      parameters:
      - description: A unique integer identifying a media.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful deletion of media.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    get:
      description: 'Get media.


        A media may be an image or a video. Media are a type of entity in Tator,

        meaning they can be described by user defined attributes.



        '
      operationId: GetMedia
      parameters:
      - description: A unique integer identifying a media.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
          description: Successful retrieval of media.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    patch:
      description: 'Update media.


        A media may be an image or a video. Media are a type of entity in Tator,

        meaning they can be described by user defined attributes.



        '
      operationId: UpdateMedia
      parameters:
      - description: A unique integer identifying a media.
        in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MediaUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful update of media.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/MediaCount/{project}:
    get:
      description: 'Retrieve count of media in a media list.


        This endpoint accepts the same query parameters as a GET request to the `Medias`
        endpoint,

        but only returns the number of media.

        '
      operationId: GetMediaCount
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      - description: List of integers identifying media.
        explode: false
        in: query
        name: media_id
        required: false
        schema:
          items:
            minimum: 1
            type: integer
          type: array
      - description: Unique integer identifying media type.
        in: query
        name: type
        required: false
        schema:
          type: integer
      - description: Name of the media to filter on.
        in: query
        name: name
        required: false
        schema:
          type: string
      - description: Unique integer identifying a media section.
        in: query
        name: section
        required: false
        schema:
          type: integer
      - description: Data type of the files, either image or video.
        in: query
        name: dtype
        required: false
        schema:
          enum:
          - image
          - video
          type: string
      - description: MD5 sum of the media file.
        in: query
        name: md5
        required: false
        schema:
          type: string
      - description: Upload group ID of the media file.
        in: query
        name: gid
        required: false
        schema:
          type: string
      - description: Upload unique ID of the media file.
        in: query
        name: uid
        required: false
        schema:
          type: string
      - description: If given, all results returned will be after the file with this
          filename. The `start` and `stop` parameters are relative to this modified
          range.
        in: query
        name: after
        required: false
        schema:
          type: string
      - description: Lucene query syntax string for use with Elasticsearch. See `reference
          <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
        examples:
          basic:
            summary: Generic search
            value: '"My search string"'
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          no_search:
            summary: No filter
            value: '*'
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          wildcard:
            summary: Wildcard search
            value: Species:*hake
        in: query
        name: search
        required: false
        schema:
          type: string
      - description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute
        required: false
        schema:
          type: string
      - description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lt
        required: false
        schema:
          type: string
      - description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lte
        required: false
        schema:
          type: string
      - description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gt
        required: false
        schema:
          type: string
      - description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gte
        required: false
        schema:
          type: string
      - description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_contains
        required: false
        schema:
          type: string
      - description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        in: query
        name: attribute_distance
        required: false
        schema:
          type: string
      - description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        in: query
        name: attribute_null
        required: false
        schema:
          type: string
      - description: Set to "count" to return a count of objects instead of the objects.
        in: query
        name: operation
        required: false
        schema:
          enum:
          - count
          type: string
      - description: Pagination start index. Index of the first item in a larger list
          to return.
        in: query
        name: start
        required: false
        schema:
          type: integer
      - description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        in: query
        name: stop
        required: false
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                minimum: 0
                type: integer
          description: Number of media in the list corresponding to query.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/MediaNext/{id}:
    get:
      description: 'Retrieve ID of next media in a media list.


        This endpoint accepts the same query parameters as a GET request to the `Medias`
        endpoint,

        but only returns the next media ID from the media passed as a path parameter.
        This allows

        iteration through a media list without serializing the entire list, which
        may be large.

        '
      operationId: GetMediaNext
      parameters:
      - description: A unique integer identifying a media object.
        in: path
        name: id
        required: true
        schema:
          type: integer
      - description: List of integers identifying media.
        explode: false
        in: query
        name: media_id
        required: false
        schema:
          items:
            minimum: 1
            type: integer
          type: array
      - description: Unique integer identifying media type.
        in: query
        name: type
        required: false
        schema:
          type: integer
      - description: Name of the media to filter on.
        in: query
        name: name
        required: false
        schema:
          type: string
      - description: Unique integer identifying a media section.
        in: query
        name: section
        required: false
        schema:
          type: integer
      - description: Data type of the files, either image or video.
        in: query
        name: dtype
        required: false
        schema:
          enum:
          - image
          - video
          type: string
      - description: MD5 sum of the media file.
        in: query
        name: md5
        required: false
        schema:
          type: string
      - description: Upload group ID of the media file.
        in: query
        name: gid
        required: false
        schema:
          type: string
      - description: Upload unique ID of the media file.
        in: query
        name: uid
        required: false
        schema:
          type: string
      - description: If given, all results returned will be after the file with this
          filename. The `start` and `stop` parameters are relative to this modified
          range.
        in: query
        name: after
        required: false
        schema:
          type: string
      - description: Lucene query syntax string for use with Elasticsearch. See `reference
          <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
        examples:
          basic:
            summary: Generic search
            value: '"My search string"'
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          no_search:
            summary: No filter
            value: '*'
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          wildcard:
            summary: Wildcard search
            value: Species:*hake
        in: query
        name: search
        required: false
        schema:
          type: string
      - description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute
        required: false
        schema:
          type: string
      - description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lt
        required: false
        schema:
          type: string
      - description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lte
        required: false
        schema:
          type: string
      - description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gt
        required: false
        schema:
          type: string
      - description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gte
        required: false
        schema:
          type: string
      - description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_contains
        required: false
        schema:
          type: string
      - description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        in: query
        name: attribute_distance
        required: false
        schema:
          type: string
      - description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        in: query
        name: attribute_null
        required: false
        schema:
          type: string
      - description: Set to "count" to return a count of objects instead of the objects.
        in: query
        name: operation
        required: false
        schema:
          enum:
          - count
          type: string
      - description: Pagination start index. Index of the first item in a larger list
          to return.
        in: query
        name: start
        required: false
        schema:
          type: integer
      - description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        in: query
        name: stop
        required: false
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaNext'
          description: ID of next media in the list corresponding to query.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/MediaPrev/{id}:
    get:
      description: "Retrieve ID of previous media in a media list.\n\nThis endpoint\
        \ accepts the same query parameters as a GET request to the `Medias` endpoint,\n\
        but only returns the previous media ID from the media passed as a path parameter.\
        \ This \nallows iteration through a media list without serializing the entire\
        \ list, which may be \nlarge.\n"
      operationId: GetMediaPrev
      parameters:
      - description: A unique integer identifying a media object.
        in: path
        name: id
        required: true
        schema:
          type: integer
      - description: List of integers identifying media.
        explode: false
        in: query
        name: media_id
        required: false
        schema:
          items:
            minimum: 1
            type: integer
          type: array
      - description: Unique integer identifying media type.
        in: query
        name: type
        required: false
        schema:
          type: integer
      - description: Name of the media to filter on.
        in: query
        name: name
        required: false
        schema:
          type: string
      - description: Unique integer identifying a media section.
        in: query
        name: section
        required: false
        schema:
          type: integer
      - description: Data type of the files, either image or video.
        in: query
        name: dtype
        required: false
        schema:
          enum:
          - image
          - video
          type: string
      - description: MD5 sum of the media file.
        in: query
        name: md5
        required: false
        schema:
          type: string
      - description: Upload group ID of the media file.
        in: query
        name: gid
        required: false
        schema:
          type: string
      - description: Upload unique ID of the media file.
        in: query
        name: uid
        required: false
        schema:
          type: string
      - description: If given, all results returned will be after the file with this
          filename. The `start` and `stop` parameters are relative to this modified
          range.
        in: query
        name: after
        required: false
        schema:
          type: string
      - description: Lucene query syntax string for use with Elasticsearch. See `reference
          <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
        examples:
          basic:
            summary: Generic search
            value: '"My search string"'
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          no_search:
            summary: No filter
            value: '*'
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          wildcard:
            summary: Wildcard search
            value: Species:*hake
        in: query
        name: search
        required: false
        schema:
          type: string
      - description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute
        required: false
        schema:
          type: string
      - description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lt
        required: false
        schema:
          type: string
      - description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lte
        required: false
        schema:
          type: string
      - description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gt
        required: false
        schema:
          type: string
      - description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gte
        required: false
        schema:
          type: string
      - description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_contains
        required: false
        schema:
          type: string
      - description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        in: query
        name: attribute_distance
        required: false
        schema:
          type: string
      - description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        in: query
        name: attribute_null
        required: false
        schema:
          type: string
      - description: Set to "count" to return a count of objects instead of the objects.
        in: query
        name: operation
        required: false
        schema:
          enum:
          - count
          type: string
      - description: Pagination start index. Index of the first item in a larger list
          to return.
        in: query
        name: start
        required: false
        schema:
          type: integer
      - description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        in: query
        name: stop
        required: false
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaPrev'
          description: ID of previous media in the list corresponding to query.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/MediaStats/{project}:
    get:
      description: 'Retrieve count, download size, total size, and duration of a media
        list.


        This endpoint accepts the same query parameters as a GET request to the `Medias`
        endpoint,

        but only returns statistics about the media.

        '
      operationId: GetMediaStats
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      - description: List of integers identifying media.
        explode: false
        in: query
        name: media_id
        required: false
        schema:
          items:
            minimum: 1
            type: integer
          type: array
      - description: Unique integer identifying media type.
        in: query
        name: type
        required: false
        schema:
          type: integer
      - description: Name of the media to filter on.
        in: query
        name: name
        required: false
        schema:
          type: string
      - description: Unique integer identifying a media section.
        in: query
        name: section
        required: false
        schema:
          type: integer
      - description: Data type of the files, either image or video.
        in: query
        name: dtype
        required: false
        schema:
          enum:
          - image
          - video
          type: string
      - description: MD5 sum of the media file.
        in: query
        name: md5
        required: false
        schema:
          type: string
      - description: Upload group ID of the media file.
        in: query
        name: gid
        required: false
        schema:
          type: string
      - description: Upload unique ID of the media file.
        in: query
        name: uid
        required: false
        schema:
          type: string
      - description: If given, all results returned will be after the file with this
          filename. The `start` and `stop` parameters are relative to this modified
          range.
        in: query
        name: after
        required: false
        schema:
          type: string
      - description: Lucene query syntax string for use with Elasticsearch. See `reference
          <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
        examples:
          basic:
            summary: Generic search
            value: '"My search string"'
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          no_search:
            summary: No filter
            value: '*'
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          wildcard:
            summary: Wildcard search
            value: Species:*hake
        in: query
        name: search
        required: false
        schema:
          type: string
      - description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute
        required: false
        schema:
          type: string
      - description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lt
        required: false
        schema:
          type: string
      - description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lte
        required: false
        schema:
          type: string
      - description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gt
        required: false
        schema:
          type: string
      - description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gte
        required: false
        schema:
          type: string
      - description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_contains
        required: false
        schema:
          type: string
      - description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        in: query
        name: attribute_distance
        required: false
        schema:
          type: string
      - description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        in: query
        name: attribute_null
        required: false
        schema:
          type: string
      - description: Set to "count" to return a count of objects instead of the objects.
        in: query
        name: operation
        required: false
        schema:
          enum:
          - count
          type: string
      - description: Pagination start index. Index of the first item in a larger list
          to return.
        in: query
        name: start
        required: false
        schema:
          type: integer
      - description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        in: query
        name: stop
        required: false
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaStats'
          description: Statistics corresponding to media list.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/MediaType/{id}:
    delete:
      description: 'Delete media type.


        A media type is the metadata definition object for media. It includes file
        format,

        name, description, and may have any number of user defined attribute

        types associated with it.



        Note that this will also delete any media associated with the media type.

        '
      operationId: DeleteMediaType
      parameters:
      - description: A unique integer identifying an media type.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful deletion of media type.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    get:
      description: 'Get media type.


        A media type is the metadata definition object for media. It includes file
        format,

        name, description, and may have any number of user defined attribute

        types associated with it.



        '
      operationId: GetMediaType
      parameters:
      - description: A unique integer identifying an media type.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaType'
          description: Successful retrieval of media type.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    patch:
      description: 'Update media type.


        A media type is the metadata definition object for media. It includes file
        format,

        name, description, and may have any number of user defined attribute

        types associated with it.



        '
      operationId: UpdateMediaType
      parameters:
      - description: A unique integer identifying an media type.
        in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            example:
              description: New description
              name: New name
            schema:
              $ref: '#/components/schemas/MediaTypeUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful update of media type.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/MediaTypes/{project}:
    get:
      description: 'Get media type list.


        A media type is the metadata definition object for media. It includes file
        format,

        name, description, and may have any number of user defined attribute

        types associated with it.

        '
      operationId: GetMediaTypeList
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MediaType'
                type: array
          description: Successful retrieval of media type list.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    post:
      description: 'Create media type.


        A media type is the metadata definition object for media. It includes file
        format,

        name, description, and may have any number of user defined attribute

        types associated with it.

        '
      operationId: CreateMediaType
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            example:
              attribute_types:
              - default: false
                dtype: bool
                name: My Boolean
              - default: 0
                dtype: int
                maximum: 1
                minimum: -1
                name: My Integer
              - default: 0.0
                dtype: float
                maximum: 1.0
                minimum: -1.0
                name: My Float
              - choices:
                - a
                - b
                - c
                default: a
                dtype: enum
                labels:
                - a
                - b
                - c
                name: My Enumeration
              - autocomplete:
                  serviceUrl: https://www.example.com/suggestion
                default: '---'
                dtype: string
                name: My String
              - default: '---'
                dtype: string
                name: My String (Text Area)
                style: long_string
              - dtype: datetime
                name: My Datetime
                use_current: true
              - default:
                - -179.0
                - 90.0
                dtype: geopos
                name: My Geoposition
              dtype: video
              name: My media type
            schema:
              $ref: '#/components/schemas/MediaTypeSpec'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
          description: Successful creation of media type.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/Medias/{project}:
    delete:
      description: "Delete media list.\n\nA media may be an image or a video. Media\
        \ are a type of entity in Tator,\nmeaning they can be described by user defined\
        \ attributes.\n\n\nThis method performs a bulk delete on all media matching\
        \ a query. It is \nrecommended to use a GET request first to check what is\
        \ being deleted.\n"
      operationId: DeleteMediaList
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      - description: List of integers identifying media.
        explode: false
        in: query
        name: media_id
        required: false
        schema:
          items:
            minimum: 1
            type: integer
          type: array
      - description: Unique integer identifying media type.
        in: query
        name: type
        required: false
        schema:
          type: integer
      - description: Name of the media to filter on.
        in: query
        name: name
        required: false
        schema:
          type: string
      - description: Unique integer identifying a media section.
        in: query
        name: section
        required: false
        schema:
          type: integer
      - description: Data type of the files, either image or video.
        in: query
        name: dtype
        required: false
        schema:
          enum:
          - image
          - video
          type: string
      - description: MD5 sum of the media file.
        in: query
        name: md5
        required: false
        schema:
          type: string
      - description: Upload group ID of the media file.
        in: query
        name: gid
        required: false
        schema:
          type: string
      - description: Upload unique ID of the media file.
        in: query
        name: uid
        required: false
        schema:
          type: string
      - description: If given, all results returned will be after the file with this
          filename. The `start` and `stop` parameters are relative to this modified
          range.
        in: query
        name: after
        required: false
        schema:
          type: string
      - description: Lucene query syntax string for use with Elasticsearch. See `reference
          <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
        examples:
          basic:
            summary: Generic search
            value: '"My search string"'
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          no_search:
            summary: No filter
            value: '*'
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          wildcard:
            summary: Wildcard search
            value: Species:*hake
        in: query
        name: search
        required: false
        schema:
          type: string
      - description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute
        required: false
        schema:
          type: string
      - description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lt
        required: false
        schema:
          type: string
      - description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lte
        required: false
        schema:
          type: string
      - description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gt
        required: false
        schema:
          type: string
      - description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gte
        required: false
        schema:
          type: string
      - description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_contains
        required: false
        schema:
          type: string
      - description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        in: query
        name: attribute_distance
        required: false
        schema:
          type: string
      - description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        in: query
        name: attribute_null
        required: false
        schema:
          type: string
      - description: Set to "count" to return a count of objects instead of the objects.
        in: query
        name: operation
        required: false
        schema:
          enum:
          - count
          type: string
      - description: Pagination start index. Index of the first item in a larger list
          to return.
        in: query
        name: start
        required: false
        schema:
          type: integer
      - description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        in: query
        name: stop
        required: false
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful deletion of media list.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    get:
      description: 'Get media list.


        A media may be an image or a video. Media are a type of entity in Tator,

        meaning they can be described by user defined attributes.



        '
      operationId: GetMediaList
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      - description: List of integers identifying media.
        explode: false
        in: query
        name: media_id
        required: false
        schema:
          items:
            minimum: 1
            type: integer
          type: array
      - description: Unique integer identifying media type.
        in: query
        name: type
        required: false
        schema:
          type: integer
      - description: Name of the media to filter on.
        in: query
        name: name
        required: false
        schema:
          type: string
      - description: Unique integer identifying a media section.
        in: query
        name: section
        required: false
        schema:
          type: integer
      - description: Data type of the files, either image or video.
        in: query
        name: dtype
        required: false
        schema:
          enum:
          - image
          - video
          type: string
      - description: MD5 sum of the media file.
        in: query
        name: md5
        required: false
        schema:
          type: string
      - description: Upload group ID of the media file.
        in: query
        name: gid
        required: false
        schema:
          type: string
      - description: Upload unique ID of the media file.
        in: query
        name: uid
        required: false
        schema:
          type: string
      - description: If given, all results returned will be after the file with this
          filename. The `start` and `stop` parameters are relative to this modified
          range.
        in: query
        name: after
        required: false
        schema:
          type: string
      - description: Lucene query syntax string for use with Elasticsearch. See `reference
          <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
        examples:
          basic:
            summary: Generic search
            value: '"My search string"'
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          no_search:
            summary: No filter
            value: '*'
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          wildcard:
            summary: Wildcard search
            value: Species:*hake
        in: query
        name: search
        required: false
        schema:
          type: string
      - description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute
        required: false
        schema:
          type: string
      - description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lt
        required: false
        schema:
          type: string
      - description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lte
        required: false
        schema:
          type: string
      - description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gt
        required: false
        schema:
          type: string
      - description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gte
        required: false
        schema:
          type: string
      - description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_contains
        required: false
        schema:
          type: string
      - description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        in: query
        name: attribute_distance
        required: false
        schema:
          type: string
      - description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        in: query
        name: attribute_null
        required: false
        schema:
          type: string
      - description: Set to "count" to return a count of objects instead of the objects.
        in: query
        name: operation
        required: false
        schema:
          enum:
          - count
          type: string
      - description: Pagination start index. Index of the first item in a larger list
          to return.
        in: query
        name: start
        required: false
        schema:
          type: integer
      - description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        in: query
        name: stop
        required: false
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Media'
                type: array
          description: Successful retrieval of media list.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    patch:
      description: "Update media list.\n\nA media may be an image or a video. Media\
        \ are a type of entity in Tator,\nmeaning they can be described by user defined\
        \ attributes.\n\n\nThis method does a bulk update on all media matching a\
        \ query. Only \nuser-defined attributes may be bulk updated.\n"
      operationId: UpdateMediaList
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      - description: List of integers identifying media.
        explode: false
        in: query
        name: media_id
        required: false
        schema:
          items:
            minimum: 1
            type: integer
          type: array
      - description: Unique integer identifying media type.
        in: query
        name: type
        required: false
        schema:
          type: integer
      - description: Name of the media to filter on.
        in: query
        name: name
        required: false
        schema:
          type: string
      - description: Unique integer identifying a media section.
        in: query
        name: section
        required: false
        schema:
          type: integer
      - description: Data type of the files, either image or video.
        in: query
        name: dtype
        required: false
        schema:
          enum:
          - image
          - video
          type: string
      - description: MD5 sum of the media file.
        in: query
        name: md5
        required: false
        schema:
          type: string
      - description: Upload group ID of the media file.
        in: query
        name: gid
        required: false
        schema:
          type: string
      - description: Upload unique ID of the media file.
        in: query
        name: uid
        required: false
        schema:
          type: string
      - description: If given, all results returned will be after the file with this
          filename. The `start` and `stop` parameters are relative to this modified
          range.
        in: query
        name: after
        required: false
        schema:
          type: string
      - description: Lucene query syntax string for use with Elasticsearch. See `reference
          <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
        examples:
          basic:
            summary: Generic search
            value: '"My search string"'
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          no_search:
            summary: No filter
            value: '*'
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          wildcard:
            summary: Wildcard search
            value: Species:*hake
        in: query
        name: search
        required: false
        schema:
          type: string
      - description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute
        required: false
        schema:
          type: string
      - description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lt
        required: false
        schema:
          type: string
      - description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lte
        required: false
        schema:
          type: string
      - description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gt
        required: false
        schema:
          type: string
      - description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gte
        required: false
        schema:
          type: string
      - description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_contains
        required: false
        schema:
          type: string
      - description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        in: query
        name: attribute_distance
        required: false
        schema:
          type: string
      - description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        in: query
        name: attribute_null
        required: false
        schema:
          type: string
      - description: Set to "count" to return a count of objects instead of the objects.
        in: query
        name: operation
        required: false
        schema:
          enum:
          - count
          type: string
      - description: Pagination start index. Index of the first item in a larger list
          to return.
        in: query
        name: start
        required: false
        schema:
          type: integer
      - description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        in: query
        name: stop
        required: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            examples:
              single:
                summary: Update Species attribute of many images
                value:
                  attributes:
                    Species: Tuna
            schema:
              $ref: '#/components/schemas/AttributeBulkUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful update of media list.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    post:
      description: "Create media.\n\nA media may be an image or a video. Media are\
        \ a type of entity in Tator,\nmeaning they can be described by user defined\
        \ attributes.\n\n\nThis method creates a `Media` object in the database. For\
        \ images, the \nmedia must already be uploaded and an upload URL must be provided,\
        \ as\nwell as the group and job IDs associated with the upload. For videos,\n\
        it is recommended to use the `Transcode` endpoint, which will create\nthe\
        \ media object itself. This method is only needed for local \ntranscodes.\
        \ In that case, it will create an empty Media object;\nthumbnails, streaming,\
        \ and archival videos must be subsequently uploaded via\ntus. Videos must\
        \ be  moved to the media folder using the `MoveVideo` endpoint, \nwhich also\
        \ calls the `Media` PATCH method to update the `media_files` field.\nThumbnails\
        \ may be saved by just using the `Media` PATCH method directly.\n"
      operationId: CreateMedia
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MediaSpec'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
          description: Successful creation of media.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/Membership/{id}:
    delete:
      description: "Delete membership.\n\nMemberships specify a permission level of\
        \ a user to a project. There are currently\nfive cumulative permission levels:\n\
        - `View Only` can only view a project and not change any data.\n- `Can Edit`\
        \ can create, modify, and delete annotations.\n- `Can Transfer` can upload\
        \ and download media.\n- `Can Execute` can launch algorithm workflows.\n-\
        \ `Full Control` can change project settings, including inviting new members,\
        \ project name, and\n   project metadata schema.\n"
      operationId: DeleteMembership
      parameters:
      - description: A unique integer identifying a membership.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful deletion of membership.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    get:
      description: "Get membership.\n\nMemberships specify a permission level of a\
        \ user to a project. There are currently\nfive cumulative permission levels:\n\
        - `View Only` can only view a project and not change any data.\n- `Can Edit`\
        \ can create, modify, and delete annotations.\n- `Can Transfer` can upload\
        \ and download media.\n- `Can Execute` can launch algorithm workflows.\n-\
        \ `Full Control` can change project settings, including inviting new members,\
        \ project name, and\n   project metadata schema.\n"
      operationId: GetMembership
      parameters:
      - description: A unique integer identifying a membership.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Membership'
          description: Successful retrieval of membership.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    patch:
      description: "Update membership.\n\nMemberships specify a permission level of\
        \ a user to a project. There are currently\nfive cumulative permission levels:\n\
        - `View Only` can only view a project and not change any data.\n- `Can Edit`\
        \ can create, modify, and delete annotations.\n- `Can Transfer` can upload\
        \ and download media.\n- `Can Execute` can launch algorithm workflows.\n-\
        \ `Full Control` can change project settings, including inviting new members,\
        \ project name, and\n   project metadata schema.\n"
      operationId: UpdateMembership
      parameters:
      - description: A unique integer identifying a membership.
        in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            example:
              permission: View Only
            schema:
              $ref: '#/components/schemas/MembershipUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful update of membership.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/Memberships/{project}:
    get:
      description: "Get membership list.\n\nMemberships specify a permission level\
        \ of a user to a project. There are currently\nfive cumulative permission\
        \ levels:\n- `View Only` can only view a project and not change any data.\n\
        - `Can Edit` can create, modify, and delete annotations.\n- `Can Transfer`\
        \ can upload and download media.\n- `Can Execute` can launch algorithm workflows.\n\
        - `Full Control` can change project settings, including inviting new members,\
        \ project name, and\n   project metadata schema.\n"
      operationId: GetMembershipList
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Membership'
                type: array
          description: Successful retrieval of membership list.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    post:
      description: "Create membership.\n\nMemberships specify a permission level of\
        \ a user to a project. There are currently\nfive cumulative permission levels:\n\
        - `View Only` can only view a project and not change any data.\n- `Can Edit`\
        \ can create, modify, and delete annotations.\n- `Can Transfer` can upload\
        \ and download media.\n- `Can Execute` can launch algorithm workflows.\n-\
        \ `Full Control` can change project settings, including inviting new members,\
        \ project name, and\n   project metadata schema.\n"
      operationId: CreateMembership
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            example:
              permission: Full Control
              user: 1
            schema:
              $ref: '#/components/schemas/MembershipSpec'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
          description: Successful creation of membership.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/MergeStates/{id}:
    patch:
      description: "Merges the source state into the target state. \nThe target state\
        \ will inherit the the source's localizations and will be deleted.\n"
      operationId: MergeStates
      parameters:
      - description: A unique integer identifying the target state to accept the merge.
        in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StateMergeUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful update of state.
      tags:
      - Tator
  /rest/MoveVideo/{id}:
    post:
      description: "Moves a video file.\n\nThis endpoint creates an Argo workflow\
        \ that moves an uploaded video file into the\nappropriate project directory.\
        \ When the move is complete, the workflow will make\na PATCH request to the\
        \ Media endpoint for the given media ID using the given \n`media_files` definitions.\n\
        \nVideos in Tator must be transcoded to a multi-resolution streaming format\
        \ before they\ncan be viewed or annotated. To launch a transcode on raw uploaded\
        \ video, use the\n`Transcode` endpoint, which will create an Argo workflow\
        \ to perform the transcode\nand save the video using this endpoint; no further\
        \ REST calls are required. However,\nif you would like to perform transcodes\
        \ locally, this endpoint enables that. The\nmodule `tator.transcode` in the\
        \ tator pip package provides local transcode capability\nusing this endpoint.\n"
      operationId: MoveVideo
      parameters:
      - description: A unique integer identifying a media.
        in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveVideoSpec'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
          description: Successful creation of move job.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/Notify:
    post:
      description: 'Send a notification to administrators.


        Uses the Slack API to send a notification to system administrators. This

        endpoint can only be used by system administrators and must be configured

        in a Tator deployment''s settings.

        '
      operationId: Notify
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotifySpec'
        required: true
      responses:
        '201':
          description: Message sent successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
        '503':
          description: Service not available.
      tags:
      - Tator
  /rest/Project/{id}:
    delete:
      description: 'Delete project.


        Projects are the object under which all data in Tator is grouped, including
        user

        access, metadata definitions, media, and annotations. Data does not cross
        boundaries

        between projects.



        Only project owners may delete a project. Note that deleting a project

        will also delete all media and annotations within a project.

        '
      operationId: DeleteProject
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful deletion of project.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    get:
      description: 'Get project.


        Projects are the object under which all data in Tator is grouped, including
        user

        access, metadata definitions, media, and annotations. Data does not cross
        boundaries

        between projects.



        '
      operationId: GetProject
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: Successful retrieval of project.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    patch:
      description: 'Update project.


        Projects are the object under which all data in Tator is grouped, including
        user

        access, metadata definitions, media, and annotations. Data does not cross
        boundaries

        between projects.



        '
      operationId: UpdateProject
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            example:
              name: New name
              summary: New summary
            schema:
              $ref: '#/components/schemas/ProjectSpec'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful update of project.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/Projects:
    get:
      description: 'Get project list.


        Projects are the object under which all data in Tator is grouped, including
        user

        access, metadata definitions, media, and annotations. Data does not cross
        boundaries

        between projects.



        Returns all projects that a user has access to.'
      operationId: GetProjectList
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Project'
                type: array
          description: Successful retrieval of project list.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    post:
      description: 'Create project.


        Projects are the object under which all data in Tator is grouped, including
        user

        access, metadata definitions, media, and annotations. Data does not cross
        boundaries

        between projects.



        '
      operationId: CreateProject
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              name: My Project
              summary: First project
            schema:
              $ref: '#/components/schemas/ProjectSpec'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
          description: Successful creation of project.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/SaveAlgorithmManifest/{project}:
    post:
      description: 'Saves an uploaded algorithm manifest to the desired project. It
        is expected this manifest

        corresponds with an algorithm workflow to be registered by another endpoint.


        Manifest is uploaded via tus, a separate mechanism from the REST API. Once
        a manifest

        upload is complete (a .yaml file), the file must be saved to the database
        using

        this endpoint.

        '
      operationId: SaveAlgorithmManifest
      parameters:
      - description: A unique integer identifying a project
        in: path
        name: project
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlgorithmManifestSpec'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlgorithmManifest'
          description: Successful save of algortihm manifest.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/Section/{id}:
    delete:
      description: 'Delete section.


        Sections represent groups of media using saved queries. The queries can be
        in the form

        of a lucene query syntax search string or a list of boolean filter queries
        applied to

        either media or child annotations of media.


        <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>


        <https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html>

        '
      operationId: DeleteSection
      parameters:
      - description: A unique integer identifying a section.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful deletion of section.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    get:
      description: 'Get section.


        Sections represent groups of media using saved queries. The queries can be
        in the form

        of a lucene query syntax search string or a list of boolean filter queries
        applied to

        either media or child annotations of media.


        <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>


        <https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html>

        '
      operationId: GetSection
      parameters:
      - description: A unique integer identifying a section.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
          description: Successful retrieval of section.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    patch:
      description: 'Update section.


        Sections represent groups of media using saved queries. The queries can be
        in the form

        of a lucene query syntax search string or a list of boolean filter queries
        applied to

        either media or child annotations of media.


        <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>


        <https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html>

        '
      operationId: UpdateSection
      parameters:
      - description: A unique integer identifying a section.
        in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            example:
              lucene_string: Field:value*
              name: New unique name
            schema:
              $ref: '#/components/schemas/SectionSpec'
        required: true
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/SectionAnalysis/{project}:
    get:
      description: 'Retrieve analysis results for a media list.


        This endpoint uses objects created with the `Analysis` endpoint to perform
        analysis

        on filtered media lists.

        '
      operationId: GetSectionAnalysis
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      - description: Unique integer identifying a media. Use this to do analyis on
          a single file instead of sections.
        explode: false
        in: query
        name: media_id
        required: false
        schema:
          items:
            minimum: 1
            type: integer
          type: array
      - description: Lucene query syntax string for use with Elasticsearch. See `reference
          <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
        examples:
          basic:
            summary: Generic search
            value: '"My search string"'
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          no_search:
            summary: No filter
            value: '*'
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          wildcard:
            summary: Wildcard search
            value: Species:*hake
        in: query
        name: search
        required: false
        schema:
          type: string
      - description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute
        required: false
        schema:
          type: string
      - description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lt
        required: false
        schema:
          type: string
      - description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lte
        required: false
        schema:
          type: string
      - description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gt
        required: false
        schema:
          type: string
      - description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gte
        required: false
        schema:
          type: string
      - description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_contains
        required: false
        schema:
          type: string
      - description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        in: query
        name: attribute_distance
        required: false
        schema:
          type: string
      - description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        in: query
        name: attribute_null
        required: false
        schema:
          type: string
      - description: Set to "count" to return a count of objects instead of the objects.
        in: query
        name: operation
        required: false
        schema:
          enum:
          - count
          type: string
      - description: Pagination start index. Index of the first item in a larger list
          to return.
        in: query
        name: start
        required: false
        schema:
          type: integer
      - description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        in: query
        name: stop
        required: false
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SectionAnalysis'
          description: Successful retrieval of section analysis.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/Sections/{project}:
    get:
      description: 'Get section list.


        Sections represent groups of media using saved queries. The queries can be
        in the form

        of a lucene query syntax search string or a list of boolean filter queries
        applied to

        either media or child annotations of media.


        <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>


        <https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html>

        '
      operationId: GetSectionList
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      - description: Name of the section.
        in: query
        name: name
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Section'
                type: array
          description: Successful retrieval of sections.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    post:
      description: 'Create section.


        Sections represent groups of media using saved queries. The queries can be
        in the form

        of a lucene query syntax search string or a list of boolean filter queries
        applied to

        either media or child annotations of media.


        <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>


        <https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html>

        '
      operationId: CreateSection
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      - description: Name of the section.
        in: query
        name: name
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SectionSpec'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
          description: Successful creation of section.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/State/{id}:
    delete:
      description: 'Delete state.


        A state is a description of a collection of other objects. The objects a state
        describes

        could be media (image or video), video frames, or localizations. A state referring

        to a collection of localizations is often referred to as a track. States are

        a type of entity in Tator, meaning they can be described by user defined attributes.

        '
      operationId: DeleteState
      parameters:
      - description: A unique integer identifying a state.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful deletion of state.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    get:
      description: 'Get state.


        A state is a description of a collection of other objects. The objects a state
        describes

        could be media (image or video), video frames, or localizations. A state referring

        to a collection of localizations is often referred to as a track. States are

        a type of entity in Tator, meaning they can be described by user defined attributes.

        '
      operationId: GetState
      parameters:
      - description: A unique integer identifying a state.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/State'
          description: Successful retrieval of state.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    patch:
      description: 'Update state.


        A state is a description of a collection of other objects. The objects a state
        describes

        could be media (image or video), video frames, or localizations. A state referring

        to a collection of localizations is often referred to as a track. States are

        a type of entity in Tator, meaning they can be described by user defined attributes.

        '
      operationId: UpdateState
      parameters:
      - description: A unique integer identifying a state.
        in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            example:
              frame: 1001
            schema:
              $ref: '#/components/schemas/StateUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful update of state.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/StateCount/{project}:
    get:
      description: 'Retrieve count of states in a state list.


        This endpoint accepts the same query parameters as a GET request to the `States`
        endpoint,

        but only returns the number of states.

        '
      operationId: GetStateCount
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      - description: Query string used to filter media IDs. If supplied, media_id
          will be ignored.
        in: query
        name: media_query
        required: false
        schema:
          type: string
      - description: Comma-separated list of media IDs.
        explode: false
        in: query
        name: media_id
        required: false
        schema:
          items:
            type: integer
          type: array
      - description: Unique integer identifying a annotation type.
        in: query
        name: type
        required: false
        schema:
          type: integer
      - description: List of integers representing versions to fetch
        explode: false
        in: query
        name: version
        required: false
        schema:
          items:
            type: integer
          type: array
      - description: If given, all results returned will be after the localization
          with this ID. The `start` and `stop` parameters are relative to this modified
          range.
        in: query
        name: after
        required: false
        schema:
          type: integer
      - description: Lucene query syntax string for use with Elasticsearch. See `reference
          <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
        examples:
          basic:
            summary: Generic search
            value: '"My search string"'
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          no_search:
            summary: No filter
            value: '*'
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          wildcard:
            summary: Wildcard search
            value: Species:*hake
        in: query
        name: search
        required: false
        schema:
          type: string
      - description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute
        required: false
        schema:
          type: string
      - description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lt
        required: false
        schema:
          type: string
      - description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lte
        required: false
        schema:
          type: string
      - description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gt
        required: false
        schema:
          type: string
      - description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gte
        required: false
        schema:
          type: string
      - description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_contains
        required: false
        schema:
          type: string
      - description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        in: query
        name: attribute_distance
        required: false
        schema:
          type: string
      - description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        in: query
        name: attribute_null
        required: false
        schema:
          type: string
      - description: Set to "count" to return a count of objects instead of the objects.
        in: query
        name: operation
        required: false
        schema:
          enum:
          - count
          type: string
      - description: Pagination start index. Index of the first item in a larger list
          to return.
        in: query
        name: start
        required: false
        schema:
          type: integer
      - description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        in: query
        name: stop
        required: false
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                minimum: 0
                type: integer
          description: Number of states in the list corresponding to query.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/StateGraphic/{id}:
    get:
      description: " Get frame(s) of a given localization-associated state.\n\nUse\
        \ the mode argument to control whether it is an animated gif or a tiled jpg.\
        \ A maximum\nof 100 detections may be retrieved at once. Use the length and\
        \ offset parameters to \ncontrol which section of a state is retrieved.\n"
      operationId: GetStateGraphic
      parameters:
      - description: A unique integer identifying a state.
        in: path
        name: id
        required: true
        schema:
          type: integer
      - description: Whether to animate or tile.
        in: query
        name: mode
        required: false
        schema:
          default: animate
          enum:
          - animate
          - tile
          type: string
      - description: Frame rate if `mode` is `animate`.
        in: query
        name: fps
        required: false
        schema:
          default: 2
          type: number
      - description: wxh to force each tile prior to stich
        in: query
        name: forceScale
        required: false
        schema:
          default: 224x224
          example: 512x512
          nullable: true
          type: string
      - description: Number of detections to extract.
        in: query
        name: length
        required: false
        schema:
          default: 100
          example: 100
          maximum: 100
          type: integer
      - description: Index offset of detections to extract.
        in: query
        name: offset
        required: false
        schema:
          default: 0
          example: 0
          type: integer
      responses:
        '200':
          content:
            image/*:
              schema:
                format: binary
                type: string
          description: Successful retrieval of state graphic.
        '400':
          content:
            image/*:
              schema:
                format: binary
                type: string
          description: Bad request.
        '404':
          content:
            image/*:
              schema:
                format: binary
                type: string
          description: Not found.
      tags:
      - Tator
  /rest/StateType/{id}:
    delete:
      description: 'Delete state type.


        A state type is the metadata definition object for a state. It includes association

        type, name, description, and may have any number of user-defined attribute

        types associated with it.



        Note that this will also delete any states associated with the state type.

        '
      operationId: DeleteStateType
      parameters:
      - description: A unique integer identifying a state type.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful deletion of state type.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    get:
      description: 'Get state type.


        A state type is the metadata definition object for a state. It includes association

        type, name, description, and may have any number of user-defined attribute

        types associated with it.



        '
      operationId: GetStateType
      parameters:
      - description: A unique integer identifying a state type.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StateType'
          description: Successful retrieval of state type.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    patch:
      description: 'Update state type.


        A state type is the metadata definition object for a state. It includes association

        type, name, description, and may have any number of user-defined attribute

        types associated with it.



        '
      operationId: UpdateStateType
      parameters:
      - description: A unique integer identifying a state type.
        in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            example:
              description: New description
              name: New name
            schema:
              $ref: '#/components/schemas/StateTypeUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful update of state type.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/StateTypes/{project}:
    get:
      description: 'Get state type list.


        A state type is the metadata definition object for a state. It includes association

        type, name, description, and may have any number of user-defined attribute

        types associated with it.

        '
      operationId: GetStateTypeList
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      - description: List of unique integers identifying a media.
        explode: false
        in: query
        name: media_id
        required: false
        schema:
          items:
            type: integer
          type: array
      - description: Deprecated. Use `LocalizationType` endpoint to retrieve individual
          localization type by ID.
        in: query
        name: type
        required: false
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/StateType'
                type: array
          description: Successful retrieval of state type list.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    post:
      description: 'Create state type.


        A state type is the metadata definition object for a state. It includes association

        type, name, description, and may have any number of user-defined attribute

        types associated with it.

        '
      operationId: CreateStateType
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            example:
              association: Frame
              attribute_types:
              - default: false
                dtype: bool
                name: My Boolean
              - default: 0
                dtype: int
                maximum: 1
                minimum: -1
                name: My Integer
              - default: 0.0
                dtype: float
                maximum: 1.0
                minimum: -1.0
                name: My Float
              - choices:
                - a
                - b
                - c
                default: a
                dtype: enum
                labels:
                - a
                - b
                - c
                name: My Enumeration
              - autocomplete:
                  serviceUrl: https://www.example.com/suggestion
                default: '---'
                dtype: string
                name: My String
              - default: '---'
                dtype: string
                name: My String (Text Area)
                style: long_string
              - dtype: datetime
                name: My Datetime
                use_current: true
              - default:
                - -179.0
                - 90.0
                dtype: geopos
                name: My Geoposition
              media_types:
              - 1
              name: My state type
            schema:
              $ref: '#/components/schemas/StateTypeSpec'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
          description: Successful creation of state type.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/States/{project}:
    delete:
      description: "Delete state list.\n\nA state is a description of a collection\
        \ of other objects. The objects a state describes\ncould be media (image or\
        \ video), video frames, or localizations. A state referring\nto a collection\
        \ of localizations is often referred to as a track. States are\na type of\
        \ entity in Tator, meaning they can be described by user defined attributes.\n\
        \n\nThis method performs a bulk delete on all states matching a query. It\
        \ is \nrecommended to use a GET request first to check what is being deleted.\n"
      operationId: DeleteStateList
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      - description: Query string used to filter media IDs. If supplied, media_id
          will be ignored.
        in: query
        name: media_query
        required: false
        schema:
          type: string
      - description: Comma-separated list of media IDs.
        explode: false
        in: query
        name: media_id
        required: false
        schema:
          items:
            type: integer
          type: array
      - description: Unique integer identifying a annotation type.
        in: query
        name: type
        required: false
        schema:
          type: integer
      - description: List of integers representing versions to fetch
        explode: false
        in: query
        name: version
        required: false
        schema:
          items:
            type: integer
          type: array
      - description: If given, all results returned will be after the localization
          with this ID. The `start` and `stop` parameters are relative to this modified
          range.
        in: query
        name: after
        required: false
        schema:
          type: integer
      - description: Lucene query syntax string for use with Elasticsearch. See `reference
          <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
        examples:
          basic:
            summary: Generic search
            value: '"My search string"'
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          no_search:
            summary: No filter
            value: '*'
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          wildcard:
            summary: Wildcard search
            value: Species:*hake
        in: query
        name: search
        required: false
        schema:
          type: string
      - description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute
        required: false
        schema:
          type: string
      - description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lt
        required: false
        schema:
          type: string
      - description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lte
        required: false
        schema:
          type: string
      - description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gt
        required: false
        schema:
          type: string
      - description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gte
        required: false
        schema:
          type: string
      - description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_contains
        required: false
        schema:
          type: string
      - description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        in: query
        name: attribute_distance
        required: false
        schema:
          type: string
      - description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        in: query
        name: attribute_null
        required: false
        schema:
          type: string
      - description: Set to "count" to return a count of objects instead of the objects.
        in: query
        name: operation
        required: false
        schema:
          enum:
          - count
          type: string
      - description: Pagination start index. Index of the first item in a larger list
          to return.
        in: query
        name: start
        required: false
        schema:
          type: integer
      - description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        in: query
        name: stop
        required: false
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful deletion of state list.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    get:
      description: 'Get state list.


        A state is a description of a collection of other objects. The objects a state
        describes

        could be media (image or video), video frames, or localizations. A state referring

        to a collection of localizations is often referred to as a track. States are

        a type of entity in Tator, meaning they can be described by user defined attributes.



        '
      operationId: GetStateList
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      - description: Query string used to filter media IDs. If supplied, media_id
          will be ignored.
        in: query
        name: media_query
        required: false
        schema:
          type: string
      - description: Comma-separated list of media IDs.
        explode: false
        in: query
        name: media_id
        required: false
        schema:
          items:
            type: integer
          type: array
      - description: Unique integer identifying a annotation type.
        in: query
        name: type
        required: false
        schema:
          type: integer
      - description: List of integers representing versions to fetch
        explode: false
        in: query
        name: version
        required: false
        schema:
          items:
            type: integer
          type: array
      - description: If given, all results returned will be after the localization
          with this ID. The `start` and `stop` parameters are relative to this modified
          range.
        in: query
        name: after
        required: false
        schema:
          type: integer
      - description: Lucene query syntax string for use with Elasticsearch. See `reference
          <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
        examples:
          basic:
            summary: Generic search
            value: '"My search string"'
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          no_search:
            summary: No filter
            value: '*'
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          wildcard:
            summary: Wildcard search
            value: Species:*hake
        in: query
        name: search
        required: false
        schema:
          type: string
      - description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute
        required: false
        schema:
          type: string
      - description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lt
        required: false
        schema:
          type: string
      - description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lte
        required: false
        schema:
          type: string
      - description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gt
        required: false
        schema:
          type: string
      - description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gte
        required: false
        schema:
          type: string
      - description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_contains
        required: false
        schema:
          type: string
      - description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        in: query
        name: attribute_distance
        required: false
        schema:
          type: string
      - description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        in: query
        name: attribute_null
        required: false
        schema:
          type: string
      - description: Set to "count" to return a count of objects instead of the objects.
        in: query
        name: operation
        required: false
        schema:
          enum:
          - count
          type: string
      - description: Pagination start index. Index of the first item in a larger list
          to return.
        in: query
        name: start
        required: false
        schema:
          type: integer
      - description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        in: query
        name: stop
        required: false
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/State'
                type: array
          description: Successful retrieval of state list.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    patch:
      description: "Update state list.\n\nA state is a description of a collection\
        \ of other objects. The objects a state describes\ncould be media (image or\
        \ video), video frames, or localizations. A state referring\nto a collection\
        \ of localizations is often referred to as a track. States are\na type of\
        \ entity in Tator, meaning they can be described by user defined attributes.\n\
        \n\nThis method does a bulk update on all states matching a query. Only \n\
        user-defined attributes may be bulk updated.\n"
      operationId: UpdateStateList
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      - description: Query string used to filter media IDs. If supplied, media_id
          will be ignored.
        in: query
        name: media_query
        required: false
        schema:
          type: string
      - description: Comma-separated list of media IDs.
        explode: false
        in: query
        name: media_id
        required: false
        schema:
          items:
            type: integer
          type: array
      - description: Unique integer identifying a annotation type.
        in: query
        name: type
        required: false
        schema:
          type: integer
      - description: List of integers representing versions to fetch
        explode: false
        in: query
        name: version
        required: false
        schema:
          items:
            type: integer
          type: array
      - description: If given, all results returned will be after the localization
          with this ID. The `start` and `stop` parameters are relative to this modified
          range.
        in: query
        name: after
        required: false
        schema:
          type: integer
      - description: Lucene query syntax string for use with Elasticsearch. See `reference
          <https://lucene.apache.org/core/2_9_4/queryparsersyntax.html>`_.
        examples:
          basic:
            summary: Generic search
            value: '"My search string"'
          boolean:
            summary: Boolean search
            value: _name:*.mp4 AND Species:*hake
          builtin_attribute:
            summary: Search built-in attribute
            value: _name:*.mp4
          no_search:
            summary: No filter
            value: '*'
          numerical_attribute:
            summary: Search numerical attribute
            value: _width:<0.5
          user_attribute:
            summary: Search on user-defined attribute
            value: Species:lobster
          wildcard:
            summary: Wildcard search
            value: Species:*hake
        in: query
        name: search
        required: false
        schema:
          type: string
      - description: Attribute equality filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute
        required: false
        schema:
          type: string
      - description: Attribute less than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lt
        required: false
        schema:
          type: string
      - description: Attribute less than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_lte
        required: false
        schema:
          type: string
      - description: Attribute greater than filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gt
        required: false
        schema:
          type: string
      - description: Attribute greater than or equal filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_gte
        required: false
        schema:
          type: string
      - description: Attribute contains filter. Format is attribute1::value1,[attribute2::value2].
        in: query
        name: attribute_contains
        required: false
        schema:
          type: string
      - description: Range filter for geoposition attributes. Format is attribute1::distance_km2::lat2::lon2,[attribute2::distancekm2::lat2::lon2].
        in: query
        name: attribute_distance
        required: false
        schema:
          type: string
      - description: Attribute null filter. Returns elements for which a given attribute
          is not defined.
        in: query
        name: attribute_null
        required: false
        schema:
          type: string
      - description: Set to "count" to return a count of objects instead of the objects.
        in: query
        name: operation
        required: false
        schema:
          enum:
          - count
          type: string
      - description: Pagination start index. Index of the first item in a larger list
          to return.
        in: query
        name: start
        required: false
        schema:
          type: integer
      - description: Pagination start index. Non-inclusive ndex of the last item in
          a larger list to return.
        in: query
        name: stop
        required: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            examples:
              single:
                summary: Update Species attribute of many states
                value:
                  attributes:
                    Species: Tuna
            schema:
              $ref: '#/components/schemas/AttributeBulkUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful update of state list.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    post:
      description: "Create state list.\n\nA state is a description of a collection\
        \ of other objects. The objects a state describes\ncould be media (image or\
        \ video), video frames, or localizations. A state referring\nto a collection\
        \ of localizations is often referred to as a track. States are\na type of\
        \ entity in Tator, meaning they can be described by user defined attributes.\n\
        \n\nThis method does a bulk create on a list of `StateSpec` objects. A \n\
        maximum of 500 states may be created in one request.\n"
      operationId: CreateStateList
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            examples:
              frame:
                summary: Frame associated state
                value:
                - My First Attribute: value1
                  My Second Attribute: value2
                  frame: 1000
                  media_ids:
                  - 1
                  type: 1
              localization:
                summary: Localization associated state
                value:
                - My First Attribute: value1
                  My Second Attribute: value2
                  localization_ids:
                  - 1
                  - 5
                  - 10
                  media_ids:
                  - 1
                  type: 1
              media:
                summary: Media associated state
                value:
                - My First Attribute: value1
                  My Second Attribute: value2
                  media_ids:
                  - 1
                  - 5
                  - 10
                  type: 1
            schema:
              items:
                $ref: '#/components/schemas/StateSpec'
              maxItems: 500
              type: array
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateListResponse'
          description: Successful creation of state(s).
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/TemporaryFile/{id}:
    delete:
      description: 'Delete temporary file.


        Temporary files are files stored server side for a defined duration.

        '
      operationId: DeleteTemporaryFile
      parameters:
      - description: A unique integer identifying a temporary file.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful deletion of temporary file.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    get:
      description: 'Get temporary file.


        Temporary files are files stored server side for a defined duration.

        '
      operationId: GetTemporaryFile
      parameters:
      - description: A unique integer identifying a temporary file.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemporaryFile'
          description: Successful retrieval of temporary file.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/TemporaryFiles/{project}:
    delete:
      description: 'Delete temporary file list.


        Temporary files are files stored server side for a defined duration.



        '
      operationId: DeleteTemporaryFileList
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      - description: If greater than 0 will return only expired files
        explode: false
        in: query
        name: expired
        required: false
        schema:
          default: 0
          type: integer
      responses:
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    get:
      description: 'Get temporary file list.


        Temporary files are files stored server side for a defined duration.



        '
      operationId: GetTemporaryFileList
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      - description: If greater than 0 will return only expired files
        explode: false
        in: query
        name: expired
        required: false
        schema:
          default: 0
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TemporaryFile'
                type: array
          description: Successful retrieval of temporary file list.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    post:
      description: 'Create temporary file.


        Temporary files are files stored server side for a defined duration.



        The file must first be uploaded via tus, and can subsequently be saved using

        this endpoint.'
      operationId: CreateTemporaryFile
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemporaryFileSpec'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
          description: Successful creation of temporary file.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/Token:
    post:
      description: ''
      operationId: CreateObtainAuthToken
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: Login credentials accepted.
        400:
          description: Login credentials invalid.
      tags:
      - Tator
  /rest/Transcode/{project}:
    post:
      description: "Start a transcode.\n\nVideos in Tator must be transcoded to a\
        \ multi-resolution streaming format before they\ncan be viewed or annotated.\
        \ This endpoint launches a transcode on raw uploaded video by\ncreating an\
        \ Argo workflow. The workflow will download the uploaded raw video, transcode\n\
        it to the proper format, upload the transcoded video, and save the video using\
        \ the \n`SaveVideo` endpoint.\n\nNote that the raw video must be uploaded\
        \ first via tus, which is a separate mechanism \nfrom the REST API. This endpoint\
        \ requires a group and run UUID associated with this \nupload. If no progress\
        \ messages were generated during upload, then the group and run \nUUIDs can\
        \ be newly generated.\n\nTranscodes may be cancelled via the `Job` or `JobGroup`\
        \ endpoints.\n"
      operationId: Transcode
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TranscodeSpec'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transcode'
          description: Successful save of the video in the database.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/TrimStateEnd/{id}:
    patch:
      description: "Trims the state's start or end point by deleting the localizations\
        \ \nbefore the new start point or after the new end point.\n"
      operationId: TrimStateEnd
      parameters:
      - description: A unique integer identifying the state to trim
        in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StateTrimUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful update of state.
      tags:
      - Tator
  /rest/User/GetCurrent:
    get:
      description: 'Get current user.


        Retrieves user making the request.

        '
      operationId: Whoami
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Successful retrieval of user who sent request.
      tags:
      - Tator
  /rest/Version/{id}:
    delete:
      description: 'Delete version.


        Versions allow for multiple "layers" of annotations on the same media. Versions

        are created at the project level, but are only displayed for a given media

        if that media contains annotations in that version. The version of an annotation

        can be set by providing it in a POST operation. Currently only localizations

        and states can have versions.



        Note that this will also delete any localizations or states associated

        with the deleted version.

        '
      operationId: DeleteVersion
      parameters:
      - description: A unique integer identifying a version.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful deletion of version.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    get:
      description: 'Get version.


        Versions allow for multiple "layers" of annotations on the same media. Versions

        are created at the project level, but are only displayed for a given media

        if that media contains annotations in that version. The version of an annotation

        can be set by providing it in a POST operation. Currently only localizations

        and states can have versions.



        '
      operationId: GetVersion
      parameters:
      - description: A unique integer identifying a version.
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
          description: Successful retrieval of version.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    patch:
      description: 'Update version.


        Versions allow for multiple "layers" of annotations on the same media. Versions

        are created at the project level, but are only displayed for a given media

        if that media contains annotations in that version. The version of an annotation

        can be set by providing it in a POST operation. Currently only localizations

        and states can have versions.



        '
      operationId: UpdateVersion
      parameters:
      - description: A unique integer identifying a version.
        in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            example:
              bases:
              - 1
              description: New description
              name: New name
              show_empty: true
            schema:
              $ref: '#/components/schemas/VersionUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          description: Successful update of version.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
  /rest/Versions/{project}:
    get:
      description: 'Get version list.


        Versions allow for multiple "layers" of annotations on the same media. Versions

        are created at the project level, but are only displayed for a given media

        if that media contains annotations in that version. The version of an annotation

        can be set by providing it in a POST operation. Currently only localizations

        and states can have versions.

        '
      operationId: GetVersionList
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      - description: Unique integer identifying a media.
        in: query
        name: media_id
        required: false
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Version'
                type: array
          description: Successful retrieval of version list.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
    post:
      description: 'Create version.


        Versions allow for multiple "layers" of annotations on the same media. Versions

        are created at the project level, but are only displayed for a given media

        if that media contains annotations in that version. The version of an annotation

        can be set by providing it in a POST operation. Currently only localizations

        and states can have versions.

        '
      operationId: CreateVersion
      parameters:
      - description: A unique integer identifying a project.
        in: path
        name: project
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            example:
              bases:
              - 1
              description: New description
              name: My new version
              show_empty: true
            schema:
              $ref: '#/components/schemas/VersionSpec'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
          description: Successful creation of version.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Not found.
      tags:
      - Tator
security:
- TokenAuth: []
